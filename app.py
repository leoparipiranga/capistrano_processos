import streamlit as st
import pandas as pd
import uuid
from datetime import datetime

# Fun√ß√µes para dados de teste
def criar_dados_teste():
    """Cria dados de exemplo para todos os tipos de processo e status"""
    try:
        # Importar as fun√ß√µes necess√°rias
        from components.functions_controle import save_data_to_github_seguro
        
        # ===== DADOS DE TESTE RPV =====
        dados_rpv_teste = [
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0001234-56.2024.5.02.0001",
                "Benefici√°rio": "Jo√£o da Silva Teste",
                "CPF": "123.456.789-01",
                "Descricao RPV": "Diferen√ßas salariais - teste",
                "Assunto": "Trabalhista",
                "Orgao Judicial": "TRT 2¬™ Regi√£o",
                "Vara": "1¬™ Vara do Trabalho",
                "Banco": "CEF",
                "Ag√™ncia": "1234",
                "Conta": "56789-0",
                "M√™s Compet√™ncia": "09/2024",
                "Solicitar Certid√£o": "Sim",
                "Observa√ß√µes": "Processo de teste - RPV",
                "Status": "Cadastro",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "Observa√ß√µes Honor√°rios": "Teste de observa√ß√µes contratuais"
            },
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0002345-67.2024.5.02.0002",
                "Benefici√°rio": "Maria dos Santos Teste",
                "CPF": "987.654.321-09",
                "Descricao RPV": "Horas extras - teste",
                "Assunto": "Trabalhista",
                "Orgao Judicial": "TRT 2¬™ Regi√£o",
                "Vara": "2¬™ Vara do Trabalho",
                "Banco": "BB",
                "Ag√™ncia": "5678",
                "Conta": "12345-6",
                "M√™s Compet√™ncia": "10/2024",
                "Solicitar Certid√£o": "N√£o",
                "Observa√ß√µes": "Processo de teste - Enviado SAC",
                "Status": "Enviado SAC",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "Observa√ß√µes Honor√°rios": ""
            }
        ]
        
        # ===== DADOS DE TESTE ALVAR√ÅS =====
        dados_alvaras_teste = [
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0003456-78.2024.8.26.0001",
                "Parte": "Pedro Oliveira Teste",
                "CPF": "456.789.123-45",
                "Advogado": "Dr. Carlos Silva",
                "Descricao Alvara": "Libera√ß√£o de valores - teste",
                "Valor": "R$ 15.000,00",
                "Banco": "CEF",
                "Ag√™ncia": "9999",
                "Conta": "88888-8",
                "Obs Gerais": "Alvar√° de teste - Cadastro",
                "Status": "Cadastro",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            },
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0004567-89.2024.8.26.0002",
                "Parte": "Ana Costa Teste",
                "CPF": "789.123.456-78",
                "Advogado": "Dra. Fernanda Lima",
                "Descricao Alvara": "Heran√ßa - teste",
                "Valor": "R$ 50.000,00",
                "Banco": "BB",
                "Ag√™ncia": "7777",
                "Conta": "66666-6",
                "Obs Gerais": "Alvar√° de teste - Enviado Rodrigo",
                "Status": "Enviado Rodrigo",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            }
        ]
        
        # ===== DADOS DE TESTE BENEF√çCIOS =====
        dados_beneficios_teste = [
            {
                "ID": str(uuid.uuid4()),
                "N¬∫ DO PROCESSO": "0005678-90.2024.8.26.0003",
                "PARTE": "Carlos Mendes Teste",
                "CPF": "321.654.987-12",
                "DETALHE PROCESSO": "Aux√≠lio-doen√ßa - teste",
                "DATA DA CONCESS√ÉO DA LIMINAR": "15/09/2024",
                "VALOR MENSAL": "R$ 1.412,00",
                "VALOR RETROATIVO": "R$ 8.472,00",
                "TOTAL GERAL": "R$ 9.884,00",
                "VALOR DE HONOR√ÅRIOS": "R$ 2.471,00",
                "STATUS": "Cadastro",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            },
            {
                "ID": str(uuid.uuid4()),
                "N¬∫ DO PROCESSO": "0006789-01.2024.8.26.0004",
                "PARTE": "Lucia Santos Teste",
                "CPF": "654.987.321-65",
                "DETALHE PROCESSO": "Aposentadoria - teste",
                "DATA DA CONCESS√ÉO DA LIMINAR": "20/09/2024",
                "VALOR MENSAL": "R$ 2.500,00",
                "VALOR RETROATIVO": "R$ 15.000,00",
                "TOTAL GERAL": "R$ 17.500,00",
                "VALOR DE HONOR√ÅRIOS": "R$ 4.375,00",
                "STATUS": "Implantado",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            }
        ]
        
        # ===== DADOS DE TESTE ACORDOS (FUTURO) =====
        dados_acordos_teste = [
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0007890-12.2024.8.26.0005",
                "Parte": "Roberto Silva Teste",
                "CPF": "111.222.333-44",
                "Descricao Acordo": "Acordo trabalhista - teste",
                "Valor Acordo": "R$ 25.000,00",
                "Data Acordo": "22/09/2024",
                "Condicoes": "Pagamento em 6 parcelas mensais",
                "Obs Gerais": "Acordo de teste - Em desenvolvimento",
                "Status": "Proposto",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            },
            {
                "ID": str(uuid.uuid4()),
                "Processo": "0008901-23.2024.8.26.0006",
                "Parte": "Sandra Costa Teste",
                "CPF": "555.666.777-88",
                "Descricao Acordo": "Acordo de indeniza√ß√£o - teste",
                "Valor Acordo": "R$ 40.000,00",
                "Data Acordo": "25/09/2024",
                "Condicoes": "Pagamento √† vista",
                "Obs Gerais": "Acordo de teste - Aceito",
                "Status": "Aceito",
                "Cadastrado por": "admin",
                "Data de Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            }
        ]
        
        # Salvar dados nos respectivos arquivos
        df_rpv = pd.DataFrame(dados_rpv_teste)
        df_alvaras = pd.DataFrame(dados_alvaras_teste)
        df_beneficios = pd.DataFrame(dados_beneficios_teste)
        df_acordos = pd.DataFrame(dados_acordos_teste)
        
        # Verificar se j√° existem dados e adicionar aos existentes
        try:
            # Tentar carregar dados existentes
            from components.functions import load_data_from_github
            
            df_rpv_existente = load_data_from_github("lista_rpv.csv")
            df_alvaras_existente = load_data_from_github("lista_alvaras.csv")
            df_beneficios_existente = load_data_from_github("lista_beneficios.csv")
            df_acordos_existente = load_data_from_github("lista_acordos.csv")
            
            # Concatenar com dados existentes
            if not df_rpv_existente.empty:
                df_rpv = pd.concat([df_rpv_existente, df_rpv], ignore_index=True)
            if not df_alvaras_existente.empty:
                df_alvaras = pd.concat([df_alvaras_existente, df_alvaras], ignore_index=True)
            if not df_beneficios_existente.empty:
                df_beneficios = pd.concat([df_beneficios_existente, df_beneficios], ignore_index=True)
            if not df_acordos_existente.empty:
                df_acordos = pd.concat([df_acordos_existente, df_acordos], ignore_index=True)
                
        except Exception:
            # Se n√£o conseguir carregar dados existentes, usar apenas os de teste
            pass
        
        # Salvar nos session_state e no GitHub
        st.session_state.df_editado_rpv = df_rpv
        st.session_state.df_editado_alvara = df_alvaras
        st.session_state.df_editado_beneficio = df_beneficios
        st.session_state.df_editado_acordo = df_acordos
        
        save_data_to_github_seguro(df_rpv, "lista_rpv.csv", "file_sha_rpv")
        save_data_to_github_seguro(df_alvaras, "lista_alvaras.csv", "file_sha_alvara")
        save_data_to_github_seguro(df_beneficios, "lista_beneficios.csv", "file_sha_beneficio")
        save_data_to_github_seguro(df_acordos, "lista_acordos.csv", "file_sha_acordo")
        
        st.success("‚úÖ Dados de teste criados com sucesso!")
        st.info(f"""
        **Dados criados:**
        - üìÑ **RPV**: 2 processos (Cadastro, Enviado SAC)
        - üèõÔ∏è **Alvar√°s**: 2 processos (Cadastro, Enviado Rodrigo)
        - üéØ **Benef√≠cios**: 2 processos (Cadastro, Implantado)
        - ü§ù **Acordos**: 2 processos (Proposto, Aceito) - *Em desenvolvimento*
        
        **Observa√ß√£o:** M√≥dulo de Acordos est√° em fase de planejamento.
        """)
        
        # Recarregar a p√°gina para mostrar os novos dados
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao criar dados de teste: {str(e)}")

def remover_dados_teste():
    """Remove todos os dados de teste do sistema"""
    try:
        from components.functions_controle import save_data_to_github_seguro
        
        # Carregar dados existentes
        from components.functions_controle import load_data_from_github
        
        df_rpv = load_data_from_github("lista_rpv.csv")
        df_alvaras = load_data_from_github("lista_alvaras.csv")
        df_beneficios = load_data_from_github("lista_beneficios.csv")
        df_acordos = load_data_from_github("lista_acordos.csv")
        
        # Remover dados que contenham "Teste" no nome/parte
        if not df_rpv.empty:
            df_rpv = df_rpv[~df_rpv["Benefici√°rio"].str.contains("Teste", na=False)]
        if not df_alvaras.empty:
            df_alvaras = df_alvaras[~df_alvaras["Parte"].str.contains("Teste", na=False)]
        if not df_beneficios.empty:
            df_beneficios = df_beneficios[~df_beneficios["PARTE"].str.contains("Teste", na=False)]
        if not df_acordos.empty:
            df_acordos = df_acordos[~df_acordos["Parte"].str.contains("Teste", na=False)]
        
        # Atualizar session_state
        st.session_state.df_editado_rpv = df_rpv
        st.session_state.df_editado_alvara = df_alvaras
        st.session_state.df_editado_beneficio = df_beneficios
        st.session_state.df_editado_acordo = df_acordos
        
        # Salvar no GitHub
        save_data_to_github_seguro(df_rpv, "lista_rpv.csv", "file_sha_rpv")
        save_data_to_github_seguro(df_alvaras, "lista_alvaras.csv", "file_sha_alvara")
        save_data_to_github_seguro(df_beneficios, "lista_beneficios.csv", "file_sha_beneficio")
        save_data_to_github_seguro(df_acordos, "lista_acordos.csv", "file_sha_acordo")
        
        st.success("‚úÖ Dados de teste removidos com sucesso!")
        st.info("üóëÔ∏è Todos os processos contendo 'Teste' foram removidos do sistema (RPV, Alvar√°s, Benef√≠cios e Acordos).")
        
        # Recarregar a p√°gina
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao remover dados de teste: {str(e)}")

st.set_page_config(
    page_title="Capistrano Advogados",
    layout="wide",
    page_icon="‚öñÔ∏è",
    initial_sidebar_state="expanded"
)

# CSS para estiliza√ß√£o da p√°gina de login e preservar controles nativos
st.markdown("""
<style>
    .stDeployButton {display:none;}
    footer {visibility: hidden;}
    
    /* Manter o bot√£o de menu nativo vis√≠vel */
    [data-testid="collapsedControl"] {
        display: block !important;
        visibility: visible !important;
    }

    /* Estiliza√ß√£o do container de login */
    .login-container {
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        background-color: #f9f9f9;
        text-align: center;
    }
    .login-header h1 {
        color: #333;
        margin-bottom: 0.5rem;
    }
    .login-header p {
        color: #666;
        margin: 0;
    }

    /* Classe para centralizar conte√∫do */
    .centered-content {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
""", unsafe_allow_html=True)

def autenticar(usuario, senha):
    try:
        usuarios = st.secrets["usuarios"]
        # Converter usuario para lowercase para compara√ß√£o case-insensitive
        usuario_lower = usuario.lower()
        
        # Procurar o usu√°rio ignorando case
        for usuario_secrets in usuarios:
            if usuario_secrets.lower() == usuario_lower:
                usuario_data = usuarios[usuario_secrets]
                return senha == usuario_data["senha"]
        return False
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {e}")
        return False

def obter_dados_usuario(usuario):
    """Obt√©m dados completos do usu√°rio autenticado"""
    try:
        usuarios = st.secrets["usuarios"]
        # Converter usuario para lowercase para compara√ß√£o case-insensitive
        usuario_lower = usuario.lower()
        
        # Procurar o usu√°rio ignorando case
        for usuario_secrets in usuarios:
            if usuario_secrets.lower() == usuario_lower:
                return usuarios[usuario_secrets]
        return None
    except Exception as e:
        st.error(f"Erro ao obter dados do usu√°rio: {e}")
        return None

def limpar_todos_estados_dialogo():
    """Limpa todos os estados de di√°logo para evitar reabrir processos automaticamente"""
    estados_para_limpar = [
        "show_alvara_dialog", "processo_aberto_id",
        "show_rpv_dialog", "rpv_aberto_id",
        "show_beneficio_dialog", "beneficio_aberto_id"
    ]
    
    for estado in estados_para_limpar:
        if estado in st.session_state:
            if "show_" in estado:
                st.session_state[estado] = False
            else:
                st.session_state[estado] = None

def mostrar_guia_utilizacao():
    """Mostra o guia de utiliza√ß√£o do sistema."""
    st.title("üìñ Guia de Utiliza√ß√£o")
    
    # Introdu√ß√£o
    st.markdown("""
    ## Bem-vindo ao Sistema de Processos Capistrano!
    
    Este guia fornece instru√ß√µes detalhadas sobre como utilizar todas as funcionalidades do sistema.
    """)
    
    # Navega√ß√£o por abas
    tab1, tab2, tab3, tab4 = st.tabs([
        "üè† Vis√£o Geral",
        "üë• Perfis e Permiss√µes", 
        "üìã Processos",
        "‚ùì FAQ"
    ])
    
    with tab1:
        st.header("Vis√£o Geral do Sistema")
        st.markdown("""
        ### üöÄ **O que √© o Sistema Capistrano?**
        
        O Sistema Capistrano √© uma **plataforma web avan√ßada** desenvolvida para gerenciar quatro tipos principais de processos:
        
        - **üèõÔ∏è Alvar√°s**: Processos relacionados a licen√ßas e autoriza√ß√µes administrativas
        - **üí∞ RPV**: Requisi√ß√µes de Pequeno Valor com an√°lise jur√≠dica
        - **üéØ Benef√≠cios**: Processos de benef√≠cios sociais com **sistema SAC** e **parcelamento em at√© 12x**
        - **ü§ù Acordos**: Acordos judiciais e extrajudiciais (em desenvolvimento)
        
        ### ‚≠ê **Principais Recursos Avan√ßados**
        
        #### üí≥ **Sistema de Pagamento Parcelado**
        - **Parcelamento em at√© 12x** para processos de benef√≠cios
        - **Controle individual** de cada parcela (Pendente, Pago, Atrasado)
        - **Dashboard financeiro** com m√©tricas detalhadas
        - **Timeline completa** de pagamentos
        
        #### üë• **Perfil SAC (Customer Service)**
        - **Atendimento especializado** ao cliente
        - **Workflow dedicado** para contato com benefici√°rios
        - **Integra√ß√£o completa** com o fluxo de benef√≠cios
        
        #### üîÑ **Workflow Inteligente**
        - **Fluxos espec√≠ficos** para cada tipo de processo
        - **Transi√ß√µes controladas** por perfil de usu√°rio
        - **Hist√≥rico completo** de todas as opera√ß√µes
        - **Estados bem definidos** para cada etapa
        
        #### üîç **Busca em Tempo Real**
        - **Auto-filtro** que funciona enquanto voc√™ digita
        - **Busca por Nome, CPF e Processo**
        - **Resultados instant√¢neos**
        - **Contador de caracteres** para acompanhar a busca
        """)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                label="üìã Tipos de Processo",
                value="4",
                help="Alvar√°s, RPV, Benef√≠cios e Acordos"
            )
        with col2:
            st.metric(
                label="üë• Perfis de Usu√°rio", 
                value="5",
                help="Admin, Cadastrador, Administrativo, Financeiro, SAC"
            )
        with col3:
            st.metric(
                label="üí≥ Parcelas M√°ximas",
                value="12x",
                help="Sistema de parcelamento para benef√≠cios"
            )
    
    with tab2:
        st.header("Perfis e Permiss√µes")
        
        # Conte√∫do dos perfis aqui...
        st.markdown("### Perfis Dispon√≠veis")
        
        # Admin
        st.markdown("#### üîß **Admin**")
        st.success("**Acesso Total** - Pode fazer tudo em todos os processos")
        
        # Outros perfis
        perfis_info = {
            "üë§ Cadastrador": "Respons√°vel pelo cadastro de novos processos",
            "üí∞ Financeiro": "Acesso a informa√ß√µes financeiras dos processos", 
            "üè¢ Administrativo": "Gerenciamento administrativo geral",
            "üìû SAC": "Atendimento ao cliente - Etapa de contato"
        }
        
        for perfil, descricao in perfis_info.items():
            st.markdown(f"#### {perfil}")
            st.info(descricao)
    
    with tab3:
        st.header("üìã Gerenciamento de Processos")
        
        st.markdown("""
        ### Tipos de Processos
        
        O sistema gerencia quatro categorias principais de processos:
        """)
        
        # Sub-abas para cada tipo de processo
        sub_tab1, sub_tab2, sub_tab3, sub_tab4 = st.tabs(["üèõÔ∏è Alvar√°s", "üí∞ RPV", "üéØ Benef√≠cios", "ü§ù Acordos"])
        
        with sub_tab1:
            st.markdown("""
            #### üèõÔ∏è Alvar√°s - Licen√ßas e Autoriza√ß√µes
            
            **Fluxo do Processo:**
            1. **üìù Cadastrado:** Inser√ß√£o inicial dos dados do alvar√°
            2. **üí∞ Enviado para Financeiro:** Processo enviado para an√°lise financeira
            3. **üëî Enviado para o Chefe:** Aprova√ß√£o final e autoriza√ß√£o
            4. **üéØ Finalizado:** Processo conclu√≠do com pagamento registrado
            """)
        
        with sub_tab2:
            st.markdown("""
            #### üí∞ RPV - Requisi√ß√µes de Pequeno Valor
            
            **Fluxo do Processo:**
            1. **üìù Cadastro:** Cadastrador registra a requisi√ß√£o inicial
            2. **üìã Status Simult√¢neos:** SAC e Administrativo trabalham em paralelo
            3. **üí∞ Valida√ß√£o Financeiro:** Financeiro valida trabalhos
            4. **üì§ Enviado para Rodrigo:** Financeiro anexa comprovante
            5. **üí≥ Aguardando Pagamento:** Financeiro anexa comprovante
            6. **üéâ Finalizado:** RPV processado com timeline completa
            """)
        
        with sub_tab3:
            st.markdown("""
            #### üéØ Benef√≠cios - Processos de Benef√≠cios Sociais
            
            **Fluxo Completo do Processo:**
            1. **üìù Ativo:** Cadastrador cria o processo inicial
            2. **üè¢ Enviado para Administrativo:** Processo enviado para an√°lise
            3. **üíª Implantado:** Processo implantado pelo administrativo
            4. **üìû Enviado para SAC:** Processo enviado para contato com cliente
            5. **‚òéÔ∏è Contato SAC:** SAC faz contato e marca como contatado
            6. **üí∞ Enviado para Financeiro:** Processo enviado para cobran√ßa
            7. **üéØ Finalizado:** Processo conclu√≠do com pagamento
            """)
        
        with sub_tab4:
            st.markdown("""
            #### ü§ù Acordos - Acordos Judiciais e Extrajudiciais
            
            **Status de Desenvolvimento:** üöß **EM PLANEJAMENTO**
            
            **Fluxo Previsto do Processo:**
            1. **üìù Proposto:** Cria√ß√£o da proposta de acordo
            2. **ü§ù Negocia√ß√£o:** Processo em fase de negocia√ß√£o
            3. **‚úÖ Aceito:** Acordo aceito pelas partes
            4. **üìã Em Cumprimento:** Acordo sendo cumprido
            5. **üéØ Cumprido:** Acordo totalmente cumprido
            6. **‚ùå Descumprido:** Acordo n√£o cumprido (reiniciar processo)
            
            ‚ö†Ô∏è **Nota:** Este m√≥dulo ser√° implementado em vers√£o futura do sistema.
            """)
    
    with tab4:
        st.header("Perguntas Frequentes (FAQ)")
        
        faqs = [
            {
                "pergunta": "‚ùì Como funciona o auto-filtro de busca?",
                "resposta": """
                **Busca em tempo real implementada:**
                - Digite no campo de busca e os resultados aparecem automaticamente
                - Funciona com **Nomes, CPF e N√∫meros de Processo**
                - Contador de caracteres mostra o progresso
                - Dispon√≠vel em **todos os m√≥dulos**: RPV, Alvar√°s e Benef√≠cios
                """
            },
            {
                "pergunta": "‚ùì Como funciona o sistema de pagamento parcelado?",
                "resposta": """
                **Sistema dispon√≠vel apenas para Benef√≠cios:**
                1. Na edi√ß√£o do processo, escolha "Pagamento Parcelado"
                2. Selecione o n√∫mero de parcelas (at√© 12x)
                3. O sistema criar√° automaticamente todas as parcelas
                4. Cada parcela tem status individual: Pendente, Pago, Atrasado
                5. Use o dashboard para acompanhar o progresso dos pagamentos
                """
            },
            {
                "pergunta": "‚ùì O que √© o perfil SAC e como funciona?",
                "resposta": """
                **SAC (Customer Service)** √© o perfil para atendimento ao cliente:
                - **Fun√ß√£o**: Fazer contato com benefici√°rios de processos implantados
                - **Acesso**: Apenas processos de benef√≠cios enviados para SAC
                - **Workflow**: Recebe processos ‚Üí Faz contato ‚Üí Marca como contatado ‚Üí Envia para financeiro
                - **Permiss√µes**: Visualizar processos SAC, marcar como contatado, enviar para financeiro
                """
            },
            {
                "pergunta": "‚ùì Como acessar dados de teste?",
                "resposta": """
                **Apenas para Administradores:**
                1. Acesse "Configura√ß√µes" na barra lateral (apenas Admin v√™)
                2. Clique em "üß™ Dados de Teste"
                3. Use "Criar Dados de Teste" para gerar exemplos
                4. Use "Remover Dados de Teste" para limpar
                
                **Dados criados incluem:** RPV, Alvar√°s, Benef√≠cios e estrutura para Acordos
                """
            }
        ]
        
        for faq in faqs:
            with st.expander(faq["pergunta"]):
                st.markdown(faq["resposta"])

if "logado" not in st.session_state:
    st.session_state.logado = False

if "pagina_atual" not in st.session_state:
    st.session_state.pagina_atual = "processo_alvaras"  # Inicia direto na tela de Alvar√°s

if not st.session_state.logado:
    
    col1, col2, col3 = st.columns([2, 3, 2])

    with col2:
        st.markdown('<div class="centered-content">', unsafe_allow_html=True)
        with st.container():
            # Logo centralizada e maior
            col_logo1, col_logo2, col_logo3 = st.columns([1, 2, 1])
            with col_logo2:
                st.image("logomarca.png", width=400)
            st.markdown("### üîê Acesso ao Sistema")

            # Envolve os inputs e o bot√£o em um formul√°rio
            with st.form(key="login_form"):
                usuario = st.text_input(
                    "üë§ Usu√°rio",
                    placeholder="Digite seu usu√°rio",
                    label_visibility="collapsed"
                )
                senha = st.text_input(
                    "üîë Senha",
                    type="password",
                    placeholder="Digite sua senha",
                    label_visibility="collapsed"
                )

                # Usa st.form_submit_button em vez de st.button
                submitted = st.form_submit_button("Entrar", use_container_width=True, type="primary")
                
                if submitted:
                    if autenticar(usuario, senha):
                        st.session_state.logado = True
                        # Salvar o nome de usu√°rio original para manter case do secrets.toml
                        dados_usuario = obter_dados_usuario(usuario)
                        if dados_usuario:
                            # Encontrar o nome real do usu√°rio no secrets.toml
                            usuarios = st.secrets["usuarios"]
                            usuario_lower = usuario.lower()
                            for usuario_secrets in usuarios:
                                if usuario_secrets.lower() == usuario_lower:
                                    st.session_state.usuario = usuario_secrets  # Nome real do secrets
                                    break
                            
                            st.session_state.nome_completo = dados_usuario.get("nome_completo", usuario)
                            st.session_state.perfil_usuario = dados_usuario.get("perfil", "N/A")
                        else:
                            st.session_state.usuario = usuario
                        
                        # Limpar estados de di√°logos ao fazer login para evitar pop-ups autom√°ticos
                        dialogos_para_limpar = [
                            "show_alvara_dialog", "processo_aberto_id",
                            "show_rpv_dialog", "rpv_aberto_id",
                            "show_beneficio_dialog", "beneficio_aberto_id"
                        ]
                        for key in dialogos_para_limpar:
                            if "show_" in key:
                                st.session_state[key] = False
                            else:
                                st.session_state[key] = None
                        
                        st.rerun()
                    else:
                        st.error("Usu√°rio ou senha incorretos.")
            
        st.markdown("</div>", unsafe_allow_html=True)

else:
    # Mostrar informa√ß√µes do usu√°rio logado e controles na sidebar
    with st.sidebar:
        # Informa√ß√µes do usu√°rio
        nome = st.session_state.get("nome_completo", "Usu√°rio")
        perfil = st.session_state.get("perfil_usuario", "N/A")
        st.markdown(f"üë§ **Perfil:** {perfil}")
        
        # Bot√£o de logout na sidebar
        if st.button("üö™ Logout", use_container_width=True, type="secondary"):
            # Limpar todas as informa√ß√µes da sess√£o
            keys_to_clear = ["logado", "usuario", "nome_completo", "perfil_usuario"]
            for key in keys_to_clear:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        
        st.markdown("---")
    
    # Fun√ß√£o para limpar estados de di√°logos ao mudar de p√°gina
    def limpar_estados_dialogos():
        """Limpa todos os estados de di√°logos abertos para evitar que reabram automaticamente"""
        dialogos_para_limpar = [
            "show_alvara_dialog", "processo_aberto_id",
            "show_rpv_dialog", "rpv_aberto_id",
            "show_beneficio_dialog", "beneficio_aberto_id"
        ]
        
        for key in dialogos_para_limpar:
            if key in st.session_state:
                if "show_" in key:
                    st.session_state[key] = False
                else:
                    st.session_state[key] = None

    # MENU LATERAL - PROCESSOS
    with st.sidebar.expander("‚öñÔ∏è Processos", expanded=True):
        if st.button("üí∞ Alvar√°s", key='processo_alvaras', use_container_width=True):
            # S√≥ limpar estados se estiver mudando de p√°gina
            if st.session_state.get("pagina_atual") != "processo_alvaras":
                limpar_estados_dialogos()
            st.session_state.pagina_atual = "processo_alvaras"
            st.rerun()
        
        if st.button("üìÑ RPV", key='processo_rpv', use_container_width=True):
            # S√≥ limpar estados se estiver mudando de p√°gina
            if st.session_state.get("pagina_atual") != "processo_rpv":
                limpar_estados_dialogos()
            st.session_state.pagina_atual = "processo_rpv"
            st.rerun()
            
        if st.button("üìã Benef√≠cios", key='processo_beneficios', use_container_width=True):
            # S√≥ limpar estados se estiver mudando de p√°gina  
            if st.session_state.get("pagina_atual") != "processo_beneficios":
                limpar_estados_dialogos()
            st.session_state.pagina_atual = "processo_beneficios"
            st.rerun()
            
        if st.button("ü§ù Acordos", key='processo_acordos', use_container_width=True):
            # S√≥ limpar estados se estiver mudando de p√°gina  
            if st.session_state.get("pagina_atual") != "processo_acordos":
                limpar_estados_dialogos()
            st.session_state.pagina_atual = "processo_acordos"
            st.rerun()
    
    # GUIA DE UTILIZA√á√ÉO
    with st.sidebar.expander("üìñ Guia", expanded=False):
        if st.button("üìö Guia de Utiliza√ß√£o", key='guia_app', use_container_width=True):
            if st.session_state.get("pagina_atual") != "guia_utilizacao":
                limpar_estados_dialogos()
            st.session_state.pagina_atual = "guia_utilizacao"
            st.rerun()
    
    # CONFIGURA√á√ïES - APENAS PARA ADMIN
    perfil_usuario = st.session_state.get("perfil_usuario", "N/A")
    usuario_atual = st.session_state.get("usuario", "")
    
    # Verificar se √© Admin
    is_admin = (perfil_usuario == "Admin" or usuario_atual == "admin")
    
    if is_admin:
        with st.sidebar.expander("‚öôÔ∏è Configura√ß√µes", expanded=False):
            if st.button("‚òÅÔ∏è Google Drive", key='config_drive', use_container_width=True):
                if st.session_state.get("pagina_atual") != "config_drive":
                    limpar_estados_dialogos()
                st.session_state.pagina_atual = "config_drive"
                st.rerun()
            
            if st.button("üìã Log de Exclus√µes", key='log_exclusoes', use_container_width=True):
                if st.session_state.get("pagina_atual") != "log_exclusoes":
                    limpar_estados_dialogos()
                st.session_state.pagina_atual = "log_exclusoes"
                st.rerun()
                
            if st.button("üóÇÔ∏è Gerenciar Autocomplete", key='gerenciar_autocomplete', use_container_width=True):
                if st.session_state.get("pagina_atual") != "gerenciar_autocomplete":
                    limpar_estados_dialogos()
                st.session_state.pagina_atual = "gerenciar_autocomplete"
                st.rerun()
                
            if st.button("üß™ Dados de Teste", key='dados_teste', use_container_width=True):
                if st.session_state.get("pagina_atual") != "dados_teste":
                    limpar_estados_dialogos()
                st.session_state.pagina_atual = "dados_teste"
                st.rerun()

    # CONTE√öDO DAS P√ÅGINAS
    if st.session_state.pagina_atual == "processo_alvaras":
        from processos import lista_alvaras
        lista_alvaras.show()
    elif st.session_state.pagina_atual == "processo_rpv":
        from processos import lista_rpv
        lista_rpv.show()
    elif st.session_state.pagina_atual == "processo_beneficios":
        from processos import lista_beneficios
        lista_beneficios.show()
    elif st.session_state.pagina_atual == "processo_acordos":
        from processos import lista_acordos
        lista_acordos.show()
    elif st.session_state.pagina_atual == "config_drive":
        from configuracao_drive import interface_configuracao_drive
        interface_configuracao_drive()
    elif st.session_state.pagina_atual == "log_exclusoes":
        from components.log_exclusoes import visualizar_log_exclusoes
        visualizar_log_exclusoes()
    elif st.session_state.pagina_atual == "gerenciar_autocomplete":
        from components.gerenciar_autocomplete import interface_gerenciamento_autocomplete
        interface_gerenciamento_autocomplete()
    elif st.session_state.pagina_atual == "dados_teste":
        # P√°gina de dados de teste (apenas para Admin)
        st.header("üß™ Dados de Teste")

        st.warning("‚ö†Ô∏è Esta se√ß√£o √© destinada para testes e desenvolvimento. Use com cuidado!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚ûï Criar Dados de Teste", type="primary", key="criar_teste_admin"):
                criar_dados_teste()
            
        with col2:
            if st.button("üóëÔ∏è Remover Dados de Teste", type="secondary", key="remover_teste_admin"):
                remover_dados_teste()
        
        st.markdown("""
        ‚ö†Ô∏è Dados de teste s√£o identificados pela palavra "Teste" no nome/parte.
        """)
    elif st.session_state.pagina_atual == "guia_utilizacao":
        mostrar_guia_utilizacao()
