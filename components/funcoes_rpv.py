# components/funcoes_rpv.py
import streamlit as st
import pandas as pd
import requests
import base64
import math
from datetime import datetime
from components.functions_controle import (
    # Fun√ß√µes GitHub
    get_github_api_info, load_data_from_github, 
    save_data_local, save_data_to_github_seguro,
    
    # Fun√ß√µes de arquivo
    salvar_arquivo, baixar_arquivo_drive,
    gerar_id_unico, garantir_coluna_id,
    
    # Fun√ß√µes de an√°lise
    mostrar_diferencas, validar_cpf, formatar_processo,
    
    # Fun√ß√µes de limpeza comuns
    limpar_campos_formulario
)

# =====================================
# CONFIGURA√á√ïES DE PERFIS - RPV
# =====================================

# a) Novos Status
STATUS_ETAPAS_RPV = {
    1: "Enviado ao Jur√≠dico",
    2: "Enviado ao Financeiro", 
    3: "Enviado para Rodrigo",
    4: "Finalizado"
}

# b) Novas Permiss√µes de Edi√ß√£o por Perfil
PERFIS_RPV = {
    "Cadastrador": [], # Cadastrador apenas cria, n√£o edita RPVs no fluxo.
    "Jur√≠dico": ["Enviado ao Jur√≠dico"],
    "Financeiro": ["Enviado ao Financeiro", "Enviado para Rodrigo"]
}

# =====================================
# FUN√á√ïES DE PERFIL E CONTROLE - RPV
# =====================================

def verificar_perfil_usuario_rpv():
    """Verifica o perfil do usu√°rio logado para RPV a partir do st.secrets."""
    usuario_atual = st.session_state.get("usuario", "")
    
    # Se n√£o houver usu√°rio logado, retorna um perfil sem permiss√µes.
    if not usuario_atual:
        return "Visitante"

    # Acessa a se√ß√£o [usuarios] do secrets.toml,
    # pega o dicion√°rio do usuario_atual (ou um dict vazio se n√£o encontrar),
    # e ent√£o pega o valor da chave "perfil" (ou "Visitante" se n√£o encontrar).
    perfil = st.secrets.usuarios.get(usuario_atual, {}).get("perfil", "Visitante")
    
    return perfil

def pode_editar_status_rpv(status_atual, perfil_usuario):
    """Verifica se o usu√°rio pode editar determinado status RPV"""
    return status_atual in PERFIS_RPV.get(perfil_usuario, [])

def obter_colunas_controle_rpv():
    """Retorna lista das colunas de controle do fluxo RPV"""
    return [
        "Solicitar Certid√£o", "Status", "Data Cadastro", "Cadastrado Por", 
        "PDF RPV", "Data Envio", "Enviado Por",
        "Certid√£o Anexada", "Data Certid√£o", "Anexado Certid√£o Por",
        "Data Envio Rodrigo", "Enviado Rodrigo Por", 
        "Comprovante Saque", "Comprovante Pagamento", "Valor Final Escrit√≥rio",
        "Data Finaliza√ß√£o", "Finalizado Por"
    ]

def inicializar_linha_vazia_rpv():
    """Retorna dicion√°rio com campos vazios para nova linha RPV"""
    campos_controle = obter_colunas_controle_rpv()
    linha_vazia = {}
    
    for campo in campos_controle:
        linha_vazia[campo] = ""
    
    return linha_vazia

# =====================================
# FUN√á√ïES DE INTERFACE E A√á√ïES - RPV
# =====================================

def interface_lista_rpv(df, perfil_usuario):
    """Lista de RPVs com pagina√ß√£o e di√°logo para a√ß√µes"""
    st.subheader("üìä Gerenciar RPVs")

    # Inicializar o estado do di√°logo
    if "show_rpv_dialog" not in st.session_state:
        st.session_state.show_rpv_dialog = False
        st.session_state.rpv_aberto_id = None

    # Filtros
    col_filtro1, col_filtro2 = st.columns(2)
    with col_filtro1:
        status_filtro = st.selectbox(
            "üîç Filtrar por Status:",
            ["Todos"] + list(STATUS_ETAPAS_RPV.values()),
            key="rpv_status_filter"
        )
    with col_filtro2:
        mostrar_apenas_meus = False
        if perfil_usuario == "Jur√≠dico":
            mostrar_apenas_meus = st.checkbox("Mostrar apenas RPVs que preciso de certid√£o")
        elif perfil_usuario == "Financeiro":
            mostrar_apenas_meus = st.checkbox("Mostrar apenas RPVs que posso editar")

    # Aplicar filtros
    df_filtrado = df.copy()
    if status_filtro != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Status"] == status_filtro]
    if mostrar_apenas_meus:
        if perfil_usuario == "Jur√≠dico":
            df_filtrado = df_filtrado[
                (df_filtrado["Solicitar Certid√£o"] == "Sim") &
                (df_filtrado["Status"].isin(["Enviado", "Certid√£o anexa"]))
            ]
        elif perfil_usuario == "Financeiro":
            df_filtrado = df_filtrado[df_filtrado["Status"].isin(["Enviado", "Certid√£o anexa", "Enviado para Rodrigo"])]

    # L√≥gica de Pagina√ß√£o
    if "current_page_rpv" not in st.session_state:
        st.session_state.current_page_rpv = 1
    
    items_per_page = 20
    total_registros = len(df_filtrado)
    total_pages = math.ceil(total_registros / items_per_page) if items_per_page > 0 else 1
    
    start_idx = (st.session_state.current_page_rpv - 1) * items_per_page
    end_idx = start_idx + items_per_page
    df_paginado = df_filtrado.iloc[start_idx:end_idx]

    # Exibir lista
    if not df_paginado.empty:
        st.markdown(f'<p style="font-size: small; color: steelblue;">Mostrando {start_idx+1} a {min(end_idx, total_registros)} de {total_registros} RPVs</p>', unsafe_allow_html=True)
        
        col_h1, col_h2, col_h3, col_h4, col_h5 = st.columns([1, 2, 2, 1.5, 2])
        with col_h1: st.markdown("**A√ß√£o**")
        with col_h2: st.markdown("**Processo**")
        with col_h3: st.markdown("**Benefici√°rio**")
        with col_h4: st.markdown("**Valor**")
        with col_h5: st.markdown("**Status**")
        st.markdown('<hr style="margin-top: 0.1rem; margin-bottom: 0.5rem;" />', unsafe_allow_html=True)

        for idx, rpv in df_paginado.iterrows():
            col_b1, col_b2, col_b3, col_b4, col_b5 = st.columns([1, 2, 2, 1.5, 2])
            rpv_id = rpv.get("ID", idx)
            
            with col_b1:
                if st.button("üîì Abrir", key=f"abrir_rpv_id_{rpv_id}"):
                    st.session_state.show_rpv_dialog = True
                    st.session_state.rpv_aberto_id = rpv_id
                    st.rerun()
            
            with col_b2: st.write(f"**{rpv.get('Processo', 'N/A')}**")
            with col_b3: st.write(rpv.get('Benefici√°rio', 'N/A'))
            with col_b4: st.write(rpv.get('Valor RPV', 'N/A'))
            with col_b5:
                status_atual = rpv.get('Status', 'N/A')
                cor = {"Enviado": "üü†", "Certid√£o anexa": "üîµ", "Enviado para Rodrigo": "üü£", "Finalizado": "üü¢"}.get(status_atual, "‚ö´")
                st.write(f"{cor} {status_atual}")

    else:
        st.info("Nenhum RPV encontrado com os filtros aplicados.")

    # Implementa√ß√£o com st.dialog
    if st.session_state.show_rpv_dialog:
        rpv_id_aberto = st.session_state.rpv_aberto_id
        linha_rpv = df[df["ID"] == rpv_id_aberto]
        titulo = f"Detalhes do RPV: {linha_rpv.iloc[0].get('Processo', 'N/A')}" if not linha_rpv.empty else "Detalhes do RPV"

        @st.dialog(titulo, width="large")
        def rpv_dialog():
            if not linha_rpv.empty:
                status_atual = linha_rpv.iloc[0].get("Status", "")
                interface_edicao_rpv(df, rpv_id_aberto, status_atual, perfil_usuario)
            else:
                st.error("‚ùå RPV n√£o encontrado.")
            
            if st.button("Fechar", key="fechar_rpv_dialog"):
                st.session_state.show_rpv_dialog = False
                st.rerun()
        
        rpv_dialog()

    # Controles de pagina√ß√£o
    if total_pages > 1:
        st.markdown("---")
        col_nav1, col_nav2, col_nav3 = st.columns([3, 2, 3])
        with col_nav1:
            if st.session_state.current_page_rpv > 1:
                if st.button("<< Primeira", key="rpv_primeira"): st.session_state.current_page_rpv = 1; st.rerun()
                if st.button("< Anterior", key="rpv_anterior"): st.session_state.current_page_rpv -= 1; st.rerun()
        with col_nav2:
            st.write(f"P√°gina {st.session_state.current_page_rpv} de {total_pages}")
        with col_nav3:
            if st.session_state.current_page_rpv < total_pages:
                if st.button("Pr√≥xima >", key="rpv_proxima"): st.session_state.current_page_rpv += 1; st.rerun()
                if st.button("√öltima >>", key="rpv_ultima"): st.session_state.current_page_rpv = total_pages; st.rerun()

def interface_edicao_rpv(df, rpv_id, status_atual, perfil_usuario):
    """Interface de edi√ß√£o completamente redesenhada para o novo fluxo de RPV."""
    
    # Verificar permiss√£o de edi√ß√£o ANTES de mostrar qualquer coisa
    if not pode_editar_status_rpv(status_atual, perfil_usuario):
        st.error(f"‚ùå Seu perfil ({perfil_usuario}) n√£o pode editar RPVs com status '{status_atual}'.")
        # Mensagens de ajuda mais claras
        if perfil_usuario == "Jur√≠dico":
            st.info("üí° O Jur√≠dico s√≥ pode atuar em RPVs com status 'Enviado ao Jur√≠dico'.")
        elif perfil_usuario == "Financeiro":
            st.info("üí° O Financeiro atua em RPVs com status 'Enviado ao Financeiro' e 'Enviado para Rodrigo'.")
        else:
            st.info("üí° Apenas Jur√≠dico e Financeiro podem editar RPVs ap√≥s o cadastro.")
        return

    linha_rpv = df[df["ID"] == rpv_id].iloc[0]
    
    # --- ETAPA 1: A√ß√£o do Jur√≠dico ---
    if status_atual == "Enviado ao Jur√≠dico" and perfil_usuario == "Jur√≠dico":
        st.markdown("#### A√ß√£o do Jur√≠dico")
        st.info("Verifique a necessidade da certid√£o e confirme a inser√ß√£o no sistema Korbil.")
        
        certidao_korbil = st.checkbox("‚úÖ Certid√£o inserida no Korbil", key=f"korbil_{rpv_id}")
        
        if certidao_korbil:
            if st.button("‚û°Ô∏è Enviar para o Financeiro", type="primary"):
                idx = df[df["ID"] == rpv_id].index[0]
                st.session_state.df_editado_rpv.loc[idx, "Status"] = "Enviado ao Financeiro"
                st.session_state.df_editado_rpv.loc[idx, "Certid√£o no Korbil"] = "Sim"
                # Salvar e fechar
                save_data_to_github_seguro(st.session_state.df_editado_rpv, "lista_rpv.csv", "file_sha_rpv")
                st.session_state.show_rpv_dialog = False
                st.success("‚úÖ RPV enviado ao Financeiro!")
                st.rerun()

    # --- ETAPA 2: A√ß√£o do Financeiro (Pr√©-Rodrigo) ---
    elif status_atual == "Enviado ao Financeiro" and perfil_usuario == "Financeiro":
        st.markdown("#### A√ß√£o do Financeiro")
        st.info("Analise a documenta√ß√£o do cliente e confirme que est√° organizada.")
        
        doc_ok = st.checkbox("‚úÖ Documenta√ß√£o do cliente organizada", key=f"doc_ok_{rpv_id}")
        
        if doc_ok:
            if st.button("‚û°Ô∏è Enviar para Rodrigo", type="primary"):
                idx = df[df["ID"] == rpv_id].index[0]
                st.session_state.df_editado_rpv.loc[idx, "Status"] = "Enviado para Rodrigo"
                st.session_state.df_editado_rpv.loc[idx, "Documenta√ß√£o Cliente OK"] = "Sim"
                # Salvar e fechar
                save_data_to_github_seguro(st.session_state.df_editado_rpv, "lista_rpv.csv", "file_sha_rpv")
                st.session_state.show_rpv_dialog = False
                st.success("‚úÖ RPV enviado para Rodrigo!")
                st.rerun()

    # --- ETAPA 3: A√ß√£o do Financeiro (P√≥s-Rodrigo) ---
    elif status_atual == "Enviado para Rodrigo" and perfil_usuario == "Financeiro":
        st.markdown("#### A√ß√£o do Financeiro (Finaliza√ß√£o)")
        st.info("Anexe os comprovantes e preencha os valores para finalizar o processo.")
        
        col1, col2 = st.columns(2)
        with col1:
            comp_saque = st.file_uploader("Comprovante de Saque (Rodrigo)", type=["pdf", "png", "jpg", "jpeg"])
        with col2:
            comp_pagamento = st.file_uploader("Comprovante de Pagamento (Clientes)", type=["pdf", "png", "jpg", "jpeg"])
            
        valor_final = st.text_input("Valor Final para o Escrit√≥rio (R$):")
        obs_valor = st.text_area("Observa√ß√µes sobre o Valor:")
        
        if comp_saque and comp_pagamento and valor_final:
            if st.button("üèÅ Finalizar RPV", type="primary"):
                processo_num = linha_rpv["Processo"]
                url_saque = salvar_arquivo(comp_saque, processo_num, "saque_rpv")
                url_pagamento = salvar_arquivo(comp_pagamento, processo_num, "pagamento_rpv")
                
                if url_saque and url_pagamento:
                    idx = df[df["ID"] == rpv_id].index[0]
                    st.session_state.df_editado_rpv.loc[idx, "Status"] = "Finalizado"
                    st.session_state.df_editado_rpv.loc[idx, "Comprovante Saque"] = url_saque
                    st.session_state.df_editado_rpv.loc[idx, "Comprovante Pagamento"] = url_pagamento
                    st.session_state.df_editado_rpv.loc[idx, "Valor Final Escrit√≥rio"] = valor_final
                    st.session_state.df_editado_rpv.loc[idx, "Observa√ß√µes Valor"] = obs_valor
                    # Salvar e fechar
                    save_data_to_github_seguro(st.session_state.df_editado_rpv, "lista_rpv.csv", "file_sha_rpv")
                    st.session_state.show_rpv_dialog = False
                    st.success("üéâ RPV Finalizado com sucesso!")
                    st.balloons()
                    st.rerun()
        else:
            st.warning("‚ö†Ô∏è Anexe ambos os comprovantes e preencha o valor final para poder finalizar.")
            
    # --- Visualiza√ß√£o de RPV Finalizado (para todos) ---
    elif status_atual == "Finalizado":
        st.markdown("#### üéâ RPV Finalizado")
        st.success("Este processo foi conclu√≠do.")
        
        # Mostrar documentos finais
        col_final1, col_final2 = st.columns(2)
        
        with col_final1:
            if linha_rpv.get("Comprovante Saque"):
                st.markdown("**üìÑ Comprovante de Saque:**")
                baixar_arquivo_drive(linha_rpv["Comprovante Saque"], "üìé Baixar Comprovante")
        
        with col_final2:
            if linha_rpv.get("Comprovante Pagamento"):
                st.markdown("**üìÑ Comprovante de Pagamento:**")
                baixar_arquivo_drive(linha_rpv["Comprovante Pagamento"], "üìé Baixar Comprovante")
        
        # Valor final
        if linha_rpv.get("Valor Final Escrit√≥rio"):
            st.markdown("**üí∞ Valor Final para o Escrit√≥rio:**")
            st.text_area("", value=linha_rpv["Valor Final Escrit√≥rio"], disabled=True, height=100)
        
        # Timeline
        st.markdown("**üìÖ Timeline do RPV:**")
        timeline_data = []
        if linha_rpv.get("Data Cadastro"):
            timeline_data.append(f"‚Ä¢ **Cadastrado:** {linha_rpv['Data Cadastro']} por {linha_rpv.get('Cadastrado Por', 'N/A')}")
        if linha_rpv.get("Data Envio"):
            timeline_data.append(f"‚Ä¢ **Enviado:** {linha_rpv['Data Envio']} por {linha_rpv.get('Enviado Por', 'N/A')}")
        if linha_rpv.get("Data Certid√£o"):
            timeline_data.append(f"‚Ä¢ **Certid√£o anexada:** {linha_rpv['Data Certid√£o']} por {linha_rpv.get('Anexado Certid√£o Por', 'N/A')}")
        if linha_rpv.get("Data Envio Rodrigo"):
            timeline_data.append(f"‚Ä¢ **Enviado para Rodrigo:** {linha_rpv['Data Envio Rodrigo']} por {linha_rpv.get('Enviado Rodrigo Por', 'N/A')}")
        if linha_rpv.get("Data Finaliza√ß√£o"):
            timeline_data.append(f"‚Ä¢ **Finalizado:** {linha_rpv['Data Finaliza√ß√£o']} por {linha_rpv.get('Finalizado Por', 'N/A')}")
        
        for item in timeline_data:
            st.markdown(item)
    
    # ACESSO NEGADO
    else:
        st.error(f"‚ùå Seu perfil ({perfil_usuario}) n√£o pode editar RPVs com status '{status_atual}'")
        
        if perfil_usuario == "Cadastrador":
            st.info("üí° Cadastradores s√≥ podem editar RPVs com status 'Cadastrado'")
        elif perfil_usuario == "Jur√≠dico":
            st.info("üí° Jur√≠dico s√≥ pode anexar certid√µes em RPVs com status 'Enviado'")
        elif perfil_usuario == "Financeiro":
            st.info("üí° Financeiro pode editar RPVs 'Enviado', 'Certid√£o anexa' e 'Enviado para Rodrigo'")

def interface_visualizar_dados_rpv(df):
    """Interface aprimorada para visualizar dados de RPVs com pagina√ß√£o."""
    if df.empty:
        st.info("‚ÑπÔ∏è N√£o h√° RPVs para visualizar.")
        return

    # Estat√≠sticas gerais
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
    with col_stat1:
        st.metric("Total de RPVs", len(df))
    with col_stat2:
        finalizados = len(df[df["Status"] == "Finalizado"]) if "Status" in df.columns else "N/A"
        st.metric("Finalizados", finalizados)
    with col_stat3:
        pendentes = len(df[df["Status"] != "Finalizado"]) if "Status" in df.columns else "N/A"
        st.metric("Pendentes", pendentes)
    with col_stat4:
        if "Data Cadastro" in df.columns:
            hoje = datetime.now().strftime("%d/%m/%Y")
            df_temp = df.copy()
            df_temp["Data Cadastro"] = df_temp["Data Cadastro"].astype(str)
            hoje_count = len(df_temp[df_temp["Data Cadastro"].str.contains(hoje, na=False)])
            st.metric("Cadastrados Hoje", hoje_count)
        else:
            st.metric("Cadastrados Hoje", "N/A")

    # Filtros para visualiza√ß√£o
    st.markdown("### üîç Filtros")
    col_filtro1, col_filtro2, col_filtro3 = st.columns(3)
    
    with col_filtro1:
        status_unicos = df["Status"].dropna().unique() if "Status" in df.columns else []
        status_filtro = st.multiselect("Status:", options=status_unicos, default=status_unicos, key="viz_rpv_status")
        
    with col_filtro2:
        usuarios_unicos = df["Cadastrado Por"].dropna().unique() if "Cadastrado Por" in df.columns else []
        usuario_filtro = st.multiselect("Cadastrado Por:", options=usuarios_unicos, default=usuarios_unicos, key="viz_rpv_user")
    
    with col_filtro3:
        pesquisa = st.text_input("Pesquisar por Benefici√°rio ou Processo:", key="viz_rpv_search")

    # Aplicar filtros
    df_visualizado = df.copy()
    if status_filtro and "Status" in df.columns:
        df_visualizado = df_visualizado[df_visualizado["Status"].isin(status_filtro)]
    if usuario_filtro and "Cadastrado Por" in df.columns:
        df_visualizado = df_visualizado[df_visualizado["Cadastrado Por"].isin(usuario_filtro)]
    if pesquisa:
        df_visualizado = df_visualizado[
            df_visualizado["Benefici√°rio"].astype(str).str.contains(pesquisa, case=False, na=False) |
            df_visualizado["Processo"].astype(str).str.contains(pesquisa, case=False, na=False)
        ]
    
    st.markdown("---")

    # Bot√µes de download acima da tabela
    if not df_visualizado.empty:
        from io import BytesIO
        
        csv_data = df_visualizado.to_csv(index=False, sep=';').encode('utf-8')
        
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_visualizado.to_excel(writer, index=False, sheet_name='Dados RPV')
        excel_data = output.getvalue()

        col_down1, col_down2, _ = st.columns([1.5, 1.5, 7])
        with col_down1:
            st.download_button(
                label="üì• Baixar CSV",
                data=csv_data,
                file_name=f"dados_rpv_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv",
            )
        with col_down2:
            st.download_button(
                label="üìä Baixar Excel",
                data=excel_data,
                file_name=f"dados_rpv_{datetime.now().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

    # L√≥gica de Pagina√ß√£o
    if "current_page_visualizar_rpv" not in st.session_state:
        st.session_state.current_page_visualizar_rpv = 1
    
    items_per_page = 10
    total_registros = len(df_visualizado)
    total_pages = math.ceil(total_registros / items_per_page) if items_per_page > 0 else 1
    
    start_idx = (st.session_state.current_page_visualizar_rpv - 1) * items_per_page
    end_idx = start_idx + items_per_page
    df_paginado = df_visualizado.iloc[start_idx:end_idx]

    # Exibir dados
    st.markdown(f"### üìä Dados ({total_registros} registros encontrados)")
    
    if not df_paginado.empty:
        st.markdown(f'<p style="font-size: small; color: steelblue;">Mostrando {start_idx+1} a {min(end_idx, total_registros)} de {total_registros} registros</p>', unsafe_allow_html=True)
        
        st.dataframe(df_paginado, use_container_width=True)
        
        # Controles de pagina√ß√£o
        st.markdown("---")
        col_nav1, col_nav2, col_nav3 = st.columns([3, 2, 3])
        with col_nav1:
            if st.session_state.current_page_visualizar_rpv > 1:
                if st.button("<< Primeira", key="viz_rpv_primeira"): st.session_state.current_page_visualizar_rpv = 1; st.rerun()
                if st.button("< Anterior", key="viz_rpv_anterior"): st.session_state.current_page_visualizar_rpv -= 1; st.rerun()
        with col_nav2:
            st.write(f"P√°gina {st.session_state.current_page_visualizar_rpv} de {total_pages}")
        with col_nav3:
            if st.session_state.current_page_visualizar_rpv < total_pages:
                if st.button("Pr√≥xima >", key="viz_rpv_proxima"): st.session_state.current_page_visualizar_rpv += 1; st.rerun()
                if st.button("√öltima >>", key="viz_rpv_ultima"): st.session_state.current_page_visualizar_rpv = total_pages; st.rerun()
    else:
        st.info("Nenhum registro encontrado com os filtros aplicados.")

def interface_cadastro_rpv(df, perfil_usuario):
    """Interface para cadastrar novos RPVs"""
    if perfil_usuario != "Cadastrador":
        st.warning("‚ö†Ô∏è Apenas Cadastradores podem criar novos RPVs")
        return

    # Inicializar contador para reset do formul√°rio
    if "form_reset_counter_rpv" not in st.session_state:
        st.session_state.form_reset_counter_rpv = 0

    # Mostrar linhas tempor√°rias primeiro (se existirem)
    if "preview_novas_linhas_rpv" in st.session_state and len(st.session_state["preview_novas_linhas_rpv"]) > 0:
        st.markdown("### üìã Linhas Adicionadas (n√£o salvas)")
        st.warning(f"‚ö†Ô∏è Voc√™ tem {len(st.session_state['preview_novas_linhas_rpv'])} linha(s) n√£o salva(s)")
        
        st.dataframe(st.session_state["preview_novas_linhas_rpv"], use_container_width=True)
        
        col_salvar, col_limpar = st.columns(2)
        
        with col_salvar:
            if st.button("üíæ Salvar Todas as Linhas", type="primary"):
                from components.functions_controle import save_data_to_github_seguro
                with st.spinner("Salvando no GitHub..."):
                    novo_sha = save_data_to_github_seguro(
                        st.session_state.df_editado_rpv,
                        "lista_rpv.csv",
                        "file_sha_rpv"
                    )
                
                if novo_sha:
                    st.session_state.file_sha_rpv = novo_sha
                    # c) CORRE√á√ÉO: Deletar a chave do preview para a se√ß√£o desaparecer
                    del st.session_state["preview_novas_linhas_rpv"]
                    st.toast("‚úÖ Todas as linhas foram salvas com sucesso!", icon="üéâ")
                    st.rerun()
                else:
                    st.error("‚ùå Falha ao salvar. Tente novamente.")

        with col_limpar:
            if st.button("üóëÔ∏è Descartar Linhas", type="secondary"):
                num_linhas_remover = len(st.session_state["preview_novas_linhas_rpv"])
                st.session_state.df_editado_rpv = st.session_state.df_editado_rpv.iloc[:-num_linhas_remover]
                del st.session_state["preview_novas_linhas_rpv"]
                st.warning("üóëÔ∏è Linhas descartadas!")
                st.rerun()
        
        st.markdown("---")

    st.subheader("üìù Cadastrar Novo RPV")

    # a) Reorganiza√ß√£o do formul√°rio
    with st.form(f"adicionar_linha_form_rpv_{st.session_state.form_reset_counter_rpv}"):
        col1, col2 = st.columns(2)
        
        with col1:
            processo = st.text_input("N√∫mero do Processo:")
            beneficiario = st.text_input("Benefici√°rio:")
            cpf = st.text_input("CPF:")
            solicitar_certidao = st.selectbox(
                "Solicitar Certid√£o?",
                options=["Sim", "N√£o"]
            )
        
        with col2:
            valor_rpv = st.text_input("Valor da RPV (R$):")
            observacoes = st.text_area("Observa√ß√µes:", height=125)
            pdf_rpv = st.file_uploader("PDF do RPV:", type=["pdf"])

        # b) Remo√ß√£o da valida√ß√£o em tempo real e bot√£o de submiss√£o
        submitted = st.form_submit_button("üìù Adicionar Linha", type="primary", use_container_width=True)

    # L√≥gica de submiss√£o
    if submitted:
        # b) Valida√ß√£o principal
        if not processo or not beneficiario or not pdf_rpv:
            st.error("‚ùå Preencha os campos Processo, Benefici√°rio e anexe o PDF do RPV.")
        else:
            from components.functions_controle import formatar_processo, validar_cpf, gerar_id_unico
            
            processo_formatado = formatar_processo(processo)
            
            if cpf and not validar_cpf(cpf):
                st.error("‚ùå CPF inv√°lido. Verifique e tente novamente.")
            elif "Processo" in df.columns and processo_formatado in df["Processo"].values:
                st.warning(f"‚ö†Ô∏è Processo {processo_formatado} j√° cadastrado.")
            else:
                # Definir o status inicial baseado na escolha da certid√£o
                if solicitar_certidao == "Sim":
                    status_inicial = "Enviado ao Jur√≠dico"
                else:
                    status_inicial = "Enviado ao Financeiro"

                # Salvar PDF
                pdf_url = salvar_arquivo(pdf_rpv, processo_formatado, "rpv")

                # Criar nova linha
                nova_linha = {
                    "ID": gerar_id_unico(st.session_state.df_editado_rpv, "ID"),
                    "Processo": processo_formatado,
                    "Benefici√°rio": beneficiario,
                    "CPF": cpf,
                    "Valor RPV": valor_rpv,
                    "Observa√ß√µes": observacoes,
                    "Solicitar Certid√£o": solicitar_certidao,
                    "Status": status_inicial, # <-- Status inicial din√¢mico
                    "Data Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M"),
                    "Cadastrado Por": st.session_state.get("usuario", "Sistema"),
                    "PDF RPV": pdf_url,
                    # Adicionar os novos campos de controle
                    "Certid√£o no Korbil": "N√£o",
                    "Documenta√ß√£o Cliente OK": "N√£o",
                    "Valor Final Escrit√≥rio": "",
                    "Observa√ß√µes Valor": ""
                }
                
                # Adicionar campos de controle vazios
                linha_controle = inicializar_linha_vazia_rpv()
                nova_linha.update({k: v for k, v in linha_controle.items() if k not in nova_linha})

                # Adicionar ao DataFrame em mem√≥ria
                st.session_state.df_editado_rpv = pd.concat(
                    [st.session_state.df_editado_rpv, pd.DataFrame([nova_linha])],
                    ignore_index=True
                )
                
                # Adicionar ao preview
                if "preview_novas_linhas_rpv" not in st.session_state:
                    st.session_state["preview_novas_linhas_rpv"] = pd.DataFrame()
                st.session_state["preview_novas_linhas_rpv"] = pd.concat(
                    [st.session_state["preview_novas_linhas_rpv"], pd.DataFrame([nova_linha])],
                    ignore_index=True
                )

                # Resetar o formul√°rio
                st.session_state.form_reset_counter_rpv += 1
                st.toast("‚úÖ Linha adicionada! Salve para persistir os dados.", icon="üëç")
                st.rerun()