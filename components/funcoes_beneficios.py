# components/funcoes_beneficios.py
import streamlit as st
import pandas as pd
import requests
import base64
from datetime import datetime
from components.functions_controle import (
    gerar_id_unico, garantir_coluna_id,
    get_github_api_info, save_data_to_github_seguro, load_data_from_github
)

# =====================================
# CONFIGURA√á√ïES DE PERFIS - BENEF√çCIOS
# =====================================

PERFIS_BENEFICIOS = {
    "Cadastrador": ["Cadastrado", "Enviado para administrativo", "Implantado", "Enviado para o financeiro"],
    "Administrativo": ["Enviado para administrativo", "Implantado"],
    "Financeiro": ["Enviado para o financeiro", "Finalizado"],
    "SAC": ["Enviado para administrativo", "Implantado", "Enviado para o financeiro", "Finalizado"]  # SAC v√™ tudo
}

STATUS_ETAPAS_BENEFICIOS = {
    1: "Enviado para administrativo",  # Come√ßa aqui automaticamente
    2: "Implantado",
    3: "Enviado para o financeiro",
    4: "Finalizado"
}

# =====================================
# FUN√á√ïES DE PERFIL E CONTROLE - BENEF√çCIOS
# =====================================

def verificar_perfil_usuario_beneficios():
    """Verifica o perfil do usu√°rio logado para Benef√≠cios"""
    usuario_atual = st.session_state.get("usuario", "")
    
    # USU√ÅRIOS LOCAIS TEMPOR√ÅRIOS PARA TESTE BENEF√çCIOS
    perfis_usuarios_beneficios = {
        "cadastrador": "Cadastrador",
        "administrativo": "Administrativo",
        "financeiro": "Financeiro",
        "sac": "SAC",
        "admin": "Cadastrador"
    }
    
    return perfis_usuarios_beneficios.get(usuario_atual, "Cadastrador")

def pode_editar_status_beneficios(status_atual, perfil_usuario):
    """Verifica se o usu√°rio pode editar determinado status Benef√≠cios"""
    return status_atual in PERFIS_BENEFICIOS.get(perfil_usuario, [])

def obter_colunas_controle_beneficios():
    """Retorna lista das colunas de controle do fluxo Benef√≠cios"""
    return [
        "Status", "Data Cadastro", "Cadastrado Por",
        "Data Envio Administrativo", "Enviado Administrativo Por",
        "Implantado", "Data Implanta√ß√£o", "Implantado Por",
        "Benef√≠cio Verificado", "Percentual Cobran√ßa", "Data Envio Financeiro", "Enviado Financeiro Por",
        "Tipo Pagamento", "Comprovante Pagamento", "Valor Pago", "Data Finaliza√ß√£o", "Finalizado Por"
    ]

def inicializar_linha_vazia_beneficios():
    """Retorna dicion√°rio com campos vazios para nova linha Benef√≠cios"""
    campos_controle = obter_colunas_controle_beneficios()
    linha_vazia = {}
    
    for campo in campos_controle:
        linha_vazia[campo] = ""
    
    return linha_vazia

# =====================================
# FUN√á√ïES DE INTERFACE E INTERA√á√ÉO - BENEF√çCIOS
# =====================================

def interface_lista_beneficios(df, perfil_usuario):
    """Lista de benef√≠cios com bot√£o Abrir para a√ß√µes"""
    st.subheader("üìä Lista de Benef√≠cios")
    
    # FILTROS
    with st.expander("üîç Filtros", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            # Filtro por status
            filtro_status = st.selectbox(
                "Status",
                ["Todos"] + list(STATUS_ETAPAS_BENEFICIOS.values())
            )
        
        with col2:
            # Filtro por termo de busca
            filtro_busca = st.text_input("Buscar por nome ou processo")
    
    # Aplicar filtros
    df_trabalho = df.copy()
    
    # Filtro por status
    if filtro_status != "Todos":
        df_trabalho = df_trabalho[df_trabalho["Status"] == filtro_status]
    
    # Filtro por termo de busca
    if filtro_busca:
        df_trabalho = df_trabalho[
            df_trabalho.apply(
                lambda row: any(
                    filtro_busca.lower() in str(value).lower()
                    for value in row.values
                ),
                axis=1
            )
        ]
    
    # Verificar se h√° dados
    if len(df_trabalho) == 0:
        st.info("Nenhum benef√≠cio encontrado com os filtros selecionados.")
        return
    
    # Bot√£o para adicionar novo benef√≠cio
    st.button("‚ûï Adicionar Novo Benef√≠cio", key="add_beneficio", 
              on_click=lambda: adicionar_novo_beneficio(df))
    
    # Exibir tabela com bot√£o para abrir cada item
    st.markdown(f"### üìã Lista ({len(df_trabalho)} benef√≠cios)")
    
    # Mostrar registros em tabela com bot√£o para abrir
    for _, row in df_trabalho.iterrows():
        col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
        
        with col1:
            st.write(f"**{row.get('Benefici√°rio', 'N/A')}**")
            st.caption(f"Processo: {row.get('Processo', 'N/A')}")
        
        with col2:
            st.write(f"**Esp√©cie:** {row.get('Esp√©cie', 'N/A')}")
            st.caption(f"DIB: {row.get('DIB', 'N/A')}")
        
        with col3:
            st.write(f"**Status:** {row.get('Status', 'N/A')}")
            
        with col4:
            # Bot√£o para abrir detalhes do benef√≠cio
            st.button("Abrir", key=f"open_{row.get('ID')}", 
                      on_click=lambda id=row.get('ID'): abrir_beneficio(id, df))
        
        st.divider()

def abrir_beneficio(beneficio_id, df):
    """Abre um benef√≠cio para visualiza√ß√£o/edi√ß√£o"""
    # Armazenar ID do benef√≠cio selecionado na sess√£o
    st.session_state.beneficio_selecionado = beneficio_id
    st.session_state.view = "editar_beneficio"

def adicionar_novo_beneficio(df):
    """Prepara para adicionar um novo benef√≠cio"""
    # Atualizar visualiza√ß√£o para formul√°rio de cadastro
    st.session_state.view = "cadastrar_beneficio"
    st.session_state.beneficio_selecionado = None

def interface_cadastro_beneficio(df, perfil_usuario):
    """Interface para cadastro de novo benef√≠cio"""
    st.header("üìù Cadastrar Novo Benef√≠cio")
    
    # Colunas para os campos do formul√°rio
    col1, col2 = st.columns(2)
    
    with col1:
        processo = st.text_input("Processo", key="input_beneficio_Processo")
        beneficiario = st.text_input("Benefici√°rio", key="input_beneficio_Beneficiario")
        cpf = st.text_input("CPF", key="input_beneficio_CPF")
        nb = st.text_input("NB", key="input_beneficio_NB")
    
    with col2:
        especie = st.text_input("Esp√©cie", key="input_beneficio_Especie")
        dib = st.date_input("DIB", key="input_beneficio_DIB")
        dcb = st.date_input("DCB", key="input_beneficio_DCB")
        valor = st.text_input("Valor", key="input_beneficio_Valor")
    
    observacoes = st.text_area("Observa√ß√µes", key="input_beneficio_Observacoes")
    
    # Bot√µes de a√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ Salvar", use_container_width=True):
            # Verificar se campos obrigat√≥rios foram preenchidos
            if not processo or not beneficiario:
                st.error("Preencha os campos obrigat√≥rios: Processo e Benefici√°rio")
                return
            
            # Gerar novo ID
            novo_id = gerar_id_unico(df, "ID")
            
            # Preparar nova linha com dados
            nova_linha = {
                "ID": novo_id,
                "Processo": processo,
                "Benefici√°rio": beneficiario,
                "CPF": cpf,
                "NB": nb,
                "Esp√©cie": especie,
                "DIB": dib.strftime("%d/%m/%Y") if hasattr(dib, "strftime") else dib,
                "DCB": dcb.strftime("%d/%m/%Y") if hasattr(dcb, "strftime") else dcb,
                "Valor": valor,
                "Observa√ß√µes": observacoes,
                "Status": "Cadastrado",
                "Data Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M"),
                "Cadastrado Por": st.session_state.get("usuario", "")
            }
            
            # Adicionar informa√ß√µes de controle
            campos_controle = inicializar_linha_vazia_beneficios()
            nova_linha.update(campos_controle)
            
            # Adicionar nova linha ao DataFrame
            if "df_editado_beneficios" not in st.session_state:
                st.session_state.df_editado_beneficios = df.copy()
            
            st.session_state.df_editado_beneficios = pd.concat(
                [st.session_state.df_editado_beneficios, pd.DataFrame([nova_linha])], 
                ignore_index=True
            )
            
            # Salvar no GitHub
            novo_sha = save_data_to_github_seguro(
                st.session_state.df_editado_beneficios,
                "lista_beneficios.csv",
                "file_sha_beneficios"
            )
            
            if novo_sha:
                st.session_state.file_sha_beneficios = novo_sha
                st.success(f"Benef√≠cio cadastrado com sucesso! ID: {novo_id}")
                st.session_state.view = "lista_beneficios"  # Voltar para lista
    
    with col2:
        if st.button("‚ùå Cancelar", use_container_width=True):
            st.session_state.view = "lista_beneficios"  # Voltar para lista

def interface_edicao_beneficio(df, beneficio_id, perfil_usuario):
    """Interface para edi√ß√£o de um benef√≠cio existente"""
    # Verificar se o ID existe no DataFrame
    if "ID" not in df.columns or beneficio_id not in df["ID"].values:
        st.error(f"Benef√≠cio ID {beneficio_id} n√£o encontrado.")
        st.session_state.view = "lista_beneficios"
        return
    
    # Obter os dados do benef√≠cio
    beneficio = df[df["ID"] == beneficio_id].iloc[0]
    processo = beneficio.get("Processo", "")
    status_atual = beneficio.get("Status", "")
    
    st.header(f"Benef√≠cio: {processo}")
    st.subheader(f"Benefici√°rio: {beneficio.get('Benefici√°rio', '')}")
    
    # Exibir informa√ß√µes gerais
    with st.expander("üìÑ Informa√ß√µes Gerais", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**ID:** {beneficio_id}")
            st.write(f"**Processo:** {processo}")
            st.write(f"**Benefici√°rio:** {beneficio.get('Benefici√°rio', '')}")
            st.write(f"**CPF:** {beneficio.get('CPF', '')}")
            st.write(f"**NB:** {beneficio.get('NB', '')}")
        
        with col2:
            st.write(f"**Esp√©cie:** {beneficio.get('Esp√©cie', '')}")
            st.write(f"**DIB:** {beneficio.get('DIB', '')}")
            st.write(f"**DCB:** {beneficio.get('DCB', '')}")
            st.write(f"**Valor:** {beneficio.get('Valor', '')}")
    
    st.write(f"**Observa√ß√µes:** {beneficio.get('Observa√ß√µes', '')}")
    
    # Verificar se o usu√°rio pode editar o status atual
    pode_editar = pode_editar_status_beneficios(status_atual, perfil_usuario)
    
    # Exibir status atual e op√ß√µes de fluxo
    st.write(f"**Status Atual:** {status_atual}")
    
    if pode_editar:
        # Exibir op√ß√µes de pr√≥ximos passos baseado no status atual
        if status_atual == "Cadastrado":
            if st.button("üì§ Enviar para Administrativo"):
                atualizar_status_beneficio(beneficio_id, "Enviado para administrativo", df)
        
        elif status_atual == "Enviado para administrativo":
            if perfil_usuario in ["Administrativo", "SAC"]:
                if st.button("‚úÖ Marcar como Implantado"):
                    atualizar_status_beneficio(beneficio_id, "Implantado", df)
        
        elif status_atual == "Implantado":
            if st.button("üì§ Enviar para Financeiro"):
                atualizar_status_beneficio(beneficio_id, "Enviado para o financeiro", df)
        
        elif status_atual == "Enviado para o financeiro":
            if perfil_usuario == "Financeiro":
                # Upload de comprovante de pagamento
                comprovante = st.file_uploader("Comprovante de Pagamento", type=["pdf"])
                valor_pago = st.text_input("Valor Pago")
                tipo_pagamento = st.selectbox("Tipo de Pagamento", ["Transfer√™ncia", "PIX", "Cheque", "Dinheiro"])
                
                if st.button("‚úÖ Finalizar"):
                    # Salvar comprovante se foi enviado
                    comprovante_base64 = ""
                    if comprovante:
                        comprovante_bytes = comprovante.read()
                        comprovante_base64 = base64.b64encode(comprovante_bytes).decode()
                    
                    # Atualizar dados do benef√≠cio
                    atualizar_dados_finalizacao(
                        beneficio_id, "Finalizado", df, 
                        comprovante_base64, valor_pago, tipo_pagamento
                    )
    
    # Bot√£o para voltar √† lista
    if st.button("‚Ü©Ô∏è Voltar para Lista"):
        st.session_state.view = "lista_beneficios"

def atualizar_status_beneficio(beneficio_id, novo_status, df):
    """Atualiza o status de um benef√≠cio"""
    # Verificar se dataframe editado existe na sess√£o
    if "df_editado_beneficios" not in st.session_state:
        st.session_state.df_editado_beneficios = df.copy()
    
    # Atualizar status
    idx = st.session_state.df_editado_beneficios["ID"] == beneficio_id
    
    # Obter usu√°rio atual
    usuario_atual = st.session_state.get("usuario", "")
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")
    
    # Atualizar campos com base no novo status
    if novo_status == "Enviado para administrativo":
        st.session_state.df_editado_beneficios.loc[idx, "Data Envio Administrativo"] = data_atual
        st.session_state.df_editado_beneficios.loc[idx, "Enviado Administrativo Por"] = usuario_atual
    
    elif novo_status == "Implantado":
        st.session_state.df_editado_beneficios.loc[idx, "Implantado"] = "Sim"
        st.session_state.df_editado_beneficios.loc[idx, "Data Implanta√ß√£o"] = data_atual
        st.session_state.df_editado_beneficios.loc[idx, "Implantado Por"] = usuario_atual
    
    elif novo_status == "Enviado para o financeiro":
        st.session_state.df_editado_beneficios.loc[idx, "Data Envio Financeiro"] = data_atual
        st.session_state.df_editado_beneficios.loc[idx, "Enviado Financeiro Por"] = usuario_atual
    
    # Atualizar status
    st.session_state.df_editado_beneficios.loc[idx, "Status"] = novo_status
    
    # Salvar no GitHub
    novo_sha = save_data_to_github_seguro(
        st.session_state.df_editado_beneficios,
        "lista_beneficios.csv",
        "file_sha_beneficios"
    )
    
    if novo_sha:
        st.session_state.file_sha_beneficios = novo_sha
        st.success(f"Status atualizado para: {novo_status}")
        # Recarregar a p√°gina para mostrar as mudan√ßas
        st.experimental_rerun()

def atualizar_dados_finalizacao(beneficio_id, novo_status, df, comprovante, valor_pago, tipo_pagamento):
    """Atualiza os dados de finaliza√ß√£o de um benef√≠cio"""
    # Verificar se dataframe editado existe na sess√£o
    if "df_editado_beneficios" not in st.session_state:
        st.session_state.df_editado_beneficios = df.copy()
    
    # Atualizar dados
    idx = st.session_state.df_editado_beneficios["ID"] == beneficio_id
    
    # Obter usu√°rio atual
    usuario_atual = st.session_state.get("usuario", "")
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")
    
    # Atualizar campos
    st.session_state.df_editado_beneficios.loc[idx, "Status"] = novo_status
    st.session_state.df_editado_beneficios.loc[idx, "Data Finaliza√ß√£o"] = data_atual
    st.session_state.df_editado_beneficios.loc[idx, "Finalizado Por"] = usuario_atual
    st.session_state.df_editado_beneficios.loc[idx, "Comprovante Pagamento"] = comprovante
    st.session_state.df_editado_beneficios.loc[idx, "Valor Pago"] = valor_pago
    st.session_state.df_editado_beneficios.loc[idx, "Tipo Pagamento"] = tipo_pagamento
    
    # Salvar no GitHub
    novo_sha = save_data_to_github_seguro(
        st.session_state.df_editado_beneficios,
        "lista_beneficios.csv",
        "file_sha_beneficios"
    )
    
    if novo_sha:
        st.session_state.file_sha_beneficios = novo_sha
        st.success("Benef√≠cio finalizado com sucesso!")
        # Recarregar a p√°gina para mostrar as mudan√ßas
        st.experimental_rerun()

# =====================================
# FUN√á√ïES DE EXPORTA√á√ÉO E IMPORTA√á√ÉO - BENEF√çCIOS
# =====================================

def carregar_beneficios():
    """Carrega os dados de benef√≠cios do GitHub"""
    df, file_sha = load_data_from_github("lista_beneficios.csv")
    
    # Garantir que o DataFrame tenha a coluna ID
    df = garantir_coluna_id(df)
    
    return df
