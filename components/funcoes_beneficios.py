# components/funcoes_beneficios.py
import streamlit as st
import pandas as pd
import requests
import io
import base64
from datetime import datetime
import math
from components.functions_controle import (
    gerar_id_unico, garantir_coluna_id,
    get_github_api_info, save_data_to_github_seguro, 
    load_data_from_github, baixar_arquivo_drive
)

# =====================================
# CONFIGURA√á√ïES DE PERFIS - BENEF√çCIOS
# =====================================

PERFIS_BENEFICIOS = {
    "Cadastrador": ["Implantado"],
    "Administrativo": ["Enviado para administrativo"],
    "Financeiro": ["Enviado para o financeiro"],
    "SAC": ["Enviado para administrativo", "Implantado", "Enviado para o financeiro"]  # SAC pode intervir em qualquer etapa
}

STATUS_ETAPAS_BENEFICIOS = {
    1: "Enviado para administrativo",  # Come√ßa aqui automaticamente
    2: "Implantado",
    3: "Enviado para o financeiro",
    4: "Finalizado"
}

# =====================================
# FUN√á√ïES DE PERFIL E CONTROLE - BENEF√çCIOS
# =====================================
def pode_editar_status_beneficios(status_atual, perfil_usuario):
    """Verifica se o usu√°rio pode editar determinado status Benef√≠cios"""
    return status_atual in PERFIS_BENEFICIOS.get(perfil_usuario, [])

def obter_colunas_controle_beneficios():
    """Retorna lista das colunas de controle do fluxo Benef√≠cios"""
    return [
        "Status", "Data Cadastro", "Cadastrado Por",
        "Data Envio Administrativo", "Enviado Administrativo Por",
        "Implantado", "Data Implanta√ß√£o", "Implantado Por",
        "Benef√≠cio Verificado", "Percentual Cobran√ßa", "Data Envio Financeiro", "Enviado Financeiro Por",
        "Tipo Pagamento", "Comprovante Pagamento", "Valor Pago", "Data Finaliza√ß√£o", "Finalizado Por"
    ]

def inicializar_linha_vazia_beneficios():
    """Retorna dicion√°rio com campos vazios para nova linha Benef√≠cios"""
    campos_controle = obter_colunas_controle_beneficios()
    linha_vazia = {}
    
    for campo in campos_controle:
        linha_vazia[campo] = ""
    
    return linha_vazia

# =====================================
# FUN√á√ïES DE INTERFACE E INTERA√á√ÉO - BENEF√çCIOS
# =====================================

def interface_lista_beneficios(df, perfil_usuario):
    """Lista de benef√≠cios com pagina√ß√£o, filtros aprimorados e di√°logo para a√ß√µes."""
    
    # ORDENAR por data de cadastro mais recente, com NAs no final
    df_ordenado = df.copy()
    if "Data Cadastro" in df_ordenado.columns:
        # Converte para datetime para ordenar corretamente, tratando erros
        df_ordenado["_data_cadastro_dt"] = pd.to_datetime(
            df_ordenado["Data Cadastro"], format='%d/%m/%Y %H:%M', errors='coerce'
        )
        # Ordena por data (decrescente) e coloca os valores nulos (NaT) no final
        df_ordenado = df_ordenado.sort_values(
            by="_data_cadastro_dt", ascending=False, na_position='last'
        ).drop(columns=["_data_cadastro_dt"])

    # Inicializar estado do di√°logo e pagina√ß√£o
    if "show_beneficio_dialog" not in st.session_state:
        st.session_state.show_beneficio_dialog = False
        st.session_state.beneficio_aberto_id = None
    if "current_page_beneficios" not in st.session_state:
        st.session_state.current_page_beneficios = 1

    # FILTROS
    st.markdown("### üîç Filtros")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_unicos = ["Todos"] + list(df["Status"].dropna().unique())
        filtro_status = st.selectbox(
            "Status:",
            options=status_unicos,
            key="beneficio_status_filter"
        )
    
    with col2:
        # Filtro por tipo de processo
        tipos_unicos = ["Todos"] + list(df["TIPO DE PROCESSO"].dropna().unique())
        filtro_tipo = st.selectbox(
            "Tipo de Processo:",
            options=tipos_unicos,
            key="beneficio_tipo_filter"
        )

    with col3:
        filtro_busca = st.text_input("Buscar por Parte, CPF ou N¬∫ Processo:", key="beneficio_search")

    # Aplicar filtros
    df_filtrado = df_ordenado.copy()
    if filtro_status != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Status"] == filtro_status]
    if filtro_tipo != "Todos":
        df_filtrado = df_filtrado[df_filtrado["TIPO DE PROCESSO"] == filtro_tipo]
    if filtro_busca:
        df_filtrado = df_filtrado[
            df_filtrado["PARTE"].str.contains(filtro_busca, case=False, na=False) |
            df_filtrado["CPF"].str.contains(filtro_busca, case=False, na=False) |
            df_filtrado["N¬∫ DO PROCESSO"].str.contains(filtro_busca, case=False, na=False)
        ]

    # L√≥gica de Pagina√ß√£o
    items_per_page = 20
    total_registros = len(df_filtrado)
    total_pages = math.ceil(total_registros / items_per_page) if items_per_page > 0 else 1
    
    if st.session_state.current_page_beneficios > total_pages:
        st.session_state.current_page_beneficios = 1

    start_idx = (st.session_state.current_page_beneficios - 1) * items_per_page
    end_idx = start_idx + items_per_page
    df_paginado = df_filtrado.iloc[start_idx:end_idx]

    # Exibir lista
    if not df_paginado.empty:
        st.markdown(f'<p style="font-size: small; color: steelblue;">Mostrando {start_idx+1} a {min(end_idx, total_registros)} de {total_registros} benef√≠cios</p>', unsafe_allow_html=True)
        
        col_h1, col_h2, col_h3, col_h4, col_h5, col_h6 = st.columns([1, 3, 2, 2, 2, 2])
        with col_h1: st.markdown("**A√ß√£o**")
        with col_h2: st.markdown("**Parte**")
        with col_h3: st.markdown("**Processo**")
        with col_h4: st.markdown("**Tipo**")
        with col_h5: st.markdown("**Status**")
        with col_h6: st.markdown("**Data Cadastro**")
        st.markdown('<hr style="margin-top: 0.1rem; margin-bottom: 0.5rem;" />', unsafe_allow_html=True)

        for _, row in df_paginado.iterrows():
            col_b1, col_b2, col_b3, col_b4, col_b5, col_b6 = st.columns([1, 3, 2, 2, 2, 2])
            beneficio_id = row.get("ID")
            
            with col_b1:
                if st.button("üîì Abrir", key=f"abrir_beneficio_id_{beneficio_id}"):
                    st.session_state.show_beneficio_dialog = True
                    st.session_state.beneficio_aberto_id = beneficio_id
                    st.rerun()
            
            with col_b2: st.write(f"**{row.get('PARTE', 'N/A')}**")
            with col_b3: st.write(row.get('N¬∫ DO PROCESSO', 'N/A'))
            with col_b4: st.write(row.get('TIPO DE PROCESSO', 'N/A'))
            with col_b5: st.write(row.get('Status', 'N/A'))
            with col_b6:
                data_cadastro = row.get('Data Cadastro')
                # Verifica se o valor √© NaN (float) ou None antes de tentar o split
                if pd.isna(data_cadastro):
                    st.write("N/A")
                else:
                    # Converte para string para garantir que o split funcione
                    st.write(str(data_cadastro).split(' ')[0])
    else:
        st.info("Nenhum benef√≠cio encontrado com os filtros aplicados.")


    # Implementa√ß√£o com st.dialog
    if st.session_state.get("show_beneficio_dialog"):
        beneficio_id_aberto = st.session_state.beneficio_aberto_id
        linha_beneficio = df[df["ID"] == beneficio_id_aberto]
        titulo = f"Detalhes do Benef√≠cio: {linha_beneficio.iloc[0].get('PARTE', 'N/A')}" if not linha_beneficio.empty else "Detalhes do Benef√≠cio"

        @st.dialog(titulo, width="large")
        def beneficio_dialog():
            if not linha_beneficio.empty:
                interface_edicao_beneficio(df, beneficio_id_aberto, perfil_usuario)
            else:
                st.error("‚ùå Benef√≠cio n√£o encontrado.")
            
            if st.button("Fechar", key="fechar_beneficio_dialog"):
                st.session_state.show_beneficio_dialog = False
                st.rerun()
        
        beneficio_dialog()

    # Controles de pagina√ß√£o
    if total_pages > 1:
        st.markdown("---")
        col_nav1, col_nav2, col_nav3 = st.columns([3, 2, 3])
        with col_nav1:
            if st.session_state.current_page_beneficios > 1:
                if st.button("<< Primeira", key="ben_primeira"): st.session_state.current_page_beneficios = 1; st.rerun()
                if st.button("< Anterior", key="ben_anterior"): st.session_state.current_page_beneficios -= 1; st.rerun()
        with col_nav2:
            st.write(f"P√°gina {st.session_state.current_page_beneficios} de {total_pages}")
        with col_nav3:
            if st.session_state.current_page_beneficios < total_pages:
                if st.button("Pr√≥xima >", key="ben_proxima"): st.session_state.current_page_beneficios += 1; st.rerun()
                if st.button("√öltima >>", key="ben_ultima"): st.session_state.current_page_beneficios = total_pages; st.rerun()

def abrir_beneficio(beneficio_id, df):
    """Abre um benef√≠cio para visualiza√ß√£o/edi√ß√£o"""
    # Armazenar ID do benef√≠cio selecionado na sess√£o
    st.session_state.beneficio_selecionado = beneficio_id
    st.session_state.view = "editar_beneficio"

def adicionar_novo_beneficio(df):
    """Prepara para adicionar um novo benef√≠cio"""
    # Atualizar visualiza√ß√£o para formul√°rio de cadastro
    st.session_state.view = "cadastrar_beneficio"
    st.session_state.beneficio_selecionado = None

def interface_cadastro_beneficio(df, perfil_usuario):
    """Interface para cadastrar novos benef√≠cios, com valida√ß√µes e dicas."""

    # Inicializar contador para reset do formul√°rio
    if "form_reset_counter_beneficios" not in st.session_state:
        st.session_state.form_reset_counter_beneficios = 0

    # Mostrar linhas tempor√°rias (se existirem)
    if "preview_novas_linhas_beneficios" in st.session_state and len(st.session_state["preview_novas_linhas_beneficios"]) > 0:
        st.markdown("### üìã Linhas Adicionadas (n√£o salvas)")
        st.warning(f"‚ö†Ô∏è Voc√™ tem {len(st.session_state['preview_novas_linhas_beneficios'])} linha(s) n√£o salva(s)")
        
        st.dataframe(st.session_state["preview_novas_linhas_beneficios"], use_container_width=True)
        
        col_salvar, col_limpar = st.columns(2)
        
        with col_salvar:
            if st.button("üíæ Salvar Todas as Linhas", type="primary", key="salvar_beneficios"):
                from components.functions_controle import save_data_to_github_seguro
                with st.spinner("Salvando no GitHub..."):
                    novo_sha = save_data_to_github_seguro(
                        st.session_state.df_editado_beneficios,
                        "lista_beneficios.csv",
                        "file_sha_beneficios"
                    )
                
                if novo_sha:
                    st.session_state.file_sha_beneficios = novo_sha
                    del st.session_state["preview_novas_linhas_beneficios"]
                    st.toast("‚úÖ Todas as linhas foram salvas com sucesso!", icon="üéâ")
                    st.rerun()
                else:
                    st.error("‚ùå Falha ao salvar. Tente novamente.")

        with col_limpar:
            if st.button("üóëÔ∏è Descartar Linhas", type="secondary", key="descartar_beneficios"):
                num_linhas_remover = len(st.session_state["preview_novas_linhas_beneficios"])
                st.session_state.df_editado_beneficios = st.session_state.df_editado_beneficios.iloc[:-num_linhas_remover]
                del st.session_state["preview_novas_linhas_beneficios"]
                st.warning("üóëÔ∏è Linhas descartadas!")
                st.rerun()
        
        st.markdown("---")

    with st.form(f"adicionar_linha_form_beneficios_{st.session_state.form_reset_counter_beneficios}"):
        col1, col2 = st.columns(2)
        
        with col1:
            processo = st.text_input(
                "N¬∫ DO PROCESSO *",
                placeholder="0000000-00.0000.0.00.0000",
                help="Ex: 0000000-00.0000.0.00.0000"
            )
            parte = st.text_input(
                "PARTE *",
                placeholder="Nome completo do benefici√°rio",
                help="O nome ser√° convertido para mai√∫sculas automaticamente."
            ).upper()
            cpf = st.text_input(
                "CPF *",
                placeholder="000.000.000-00",
                help="Digite apenas os n√∫meros.",
                max_chars=14
            )
            tipo_processo = st.selectbox(
                "TIPO DE PROCESSO *",
                ["", "LOAS", "LOAS DEFICIENTE", "LOAS IDOSO", "Aposentadoria por Invalidez", 
                 "Aposentadoria por Idade", "Aux√≠lio Doen√ßa", "Aux√≠lio Acidente", 
                 "Pens√£o por Morte", "Sal√°rio Maternidade", "Outros"],
                help="Selecione o tipo de benef√≠cio ou processo."
            )
        
        with col2:
            data_liminar = st.date_input(
                "DATA DA CONCESS√ÉO DA LIMINAR",
                value=None,
                help="Opcional: Data em que a liminar foi concedida."
            )
            prazo_fatal = st.date_input(
                "PROV√ÅVEL PRAZO FATAL PARA CUMPRIMENTO",
                value=None,
                help="Opcional: Prazo final para o cumprimento da obriga√ß√£o."
            )
            observacoes = st.text_area(
                "OBSERVA√á√ïES",
                placeholder="Detalhes importantes sobre o caso...",
                height=125
            )

        submitted = st.form_submit_button("üìù Adicionar Linha", type="primary", use_container_width=True)

    # L√≥gica de submiss√£o
    if submitted:
        # Valida√ß√µes
        campos_obrigatorios = {"N¬∫ DO PROCESSO": processo, "PARTE": parte, "CPF": cpf, "TIPO DE PROCESSO": tipo_processo}
        campos_vazios = [nome for nome, valor in campos_obrigatorios.items() if not valor or not valor.strip()]
        
        cpf_numeros = ''.join(filter(str.isdigit, cpf))
        
        if campos_vazios:
            st.error(f"‚ùå Preencha os campos obrigat√≥rios: {', '.join(campos_vazios)}")
        elif cpf and len(cpf_numeros) != 11:
            st.error(f"‚ùå O CPF '{cpf}' √© inv√°lido. Deve conter 11 n√∫meros.")
        else:
            from components.functions_controle import gerar_id_unico
            
            nova_linha = {
                "ID": gerar_id_unico(st.session_state.df_editado_beneficios, "ID"),
                "N¬∫ DO PROCESSO": processo,
                "PARTE": parte,
                "CPF": cpf_numeros, # Salva apenas os n√∫meros
                "TIPO DE PROCESSO": tipo_processo,
                "DATA DA CONCESS√ÉO DA LIMINAR": data_liminar.strftime("%d/%m/%Y") if data_liminar else "",
                "PROV√ÅVEL PRAZO FATAL PARA CUMPRIMENTO": prazo_fatal.strftime("%d/%m/%Y") if prazo_fatal else "",
                "OBSERVA√á√ïES": observacoes,
                "Status": "Enviado para administrativo",
                "Data Cadastro": datetime.now().strftime("%d/%m/%Y %H:%M"),
                "Cadastrado Por": st.session_state.get("usuario", "Sistema")
            }
            
            # Adicionar ao DataFrame em mem√≥ria
            df_nova_linha = pd.DataFrame([nova_linha])
            st.session_state.df_editado_beneficios = pd.concat(
                [st.session_state.df_editado_beneficios, df_nova_linha],
                ignore_index=True
            )
            
            # Adicionar ao preview
            if "preview_novas_linhas_beneficios" not in st.session_state:
                st.session_state["preview_novas_linhas_beneficios"] = pd.DataFrame()
            st.session_state["preview_novas_linhas_beneficios"] = pd.concat(
                [st.session_state["preview_novas_linhas_beneficios"], df_nova_linha],
                ignore_index=True
            )

            st.session_state.form_reset_counter_beneficios += 1
            st.toast("‚úÖ Linha adicionada! Salve para persistir os dados.", icon="üëç")
            st.rerun()

def interface_edicao_beneficio(df, beneficio_id, perfil_usuario):
    """
    Interface de edi√ß√£o com o fluxo de trabalho corrigido e adaptada para st.dialog.
    """
    from components.functions_controle import salvar_arquivo, baixar_arquivo_drive

    linha_beneficio = df[df["ID"] == beneficio_id].iloc[0]
    status_atual = linha_beneficio.get("Status", "N/A")
    processo = linha_beneficio.get("N¬∫ DO PROCESSO", "N/A")

    st.markdown(f"**ID:** `{beneficio_id}` | **Benefici√°rio:** {linha_beneficio.get('PARTE', 'N/A')}")
    st.markdown(f"**Status atual:** {status_atual}")
    st.markdown("---")

    # ETAPA 1: Cadastrador cria -> Status 'Enviado para administrativo' (Tratado no cadastro)

    # ETAPA 2: Administrativo recebe, analisa e marca como implantado.
    if status_atual == "Enviado para administrativo" and perfil_usuario == "Administrativo":
        st.markdown("#### üîß An√°lise Administrativa")
        st.info("Ap√≥s inserir os documentos no Korbil, marque a caixa abaixo e salve.")
        
        korbil_ok = st.checkbox("Carta de Concess√£o e Hist√≥rico de Cr√©dito inseridos no Korbil")
        
        if st.button("üíæ Salvar e Devolver para Cadastrador", type="primary", disabled=not korbil_ok):
            atualizar_status_beneficio(beneficio_id, "Implantado", df)

    # ETAPA 3: Cadastrador recebe, verifica e envia para o financeiro.
    elif status_atual == "Implantado" and perfil_usuario == "Cadastrador":
        st.markdown("#### üîç Verifica√ß√£o e Defini√ß√£o de Valores")
        st.info("Confira os dados, informe os valores e confirme a verifica√ß√£o para prosseguir.")

        col1, col2 = st.columns(2)
        with col1:
            valor_beneficio = st.text_input("Valor do Benef√≠cio *", placeholder="Ex: 1850.75")
        with col2:
            percentual_cobranca = st.text_input("Percentual a ser Cobrado *", placeholder="Ex: 30%")
        
        processo_verificado = st.checkbox("Processo verificado")

        if st.button("üì§ Enviar para Financeiro", type="primary", disabled=not processo_verificado):
            if valor_beneficio and percentual_cobranca:
                atualizar_status_beneficio(
                    beneficio_id, "Enviado para o financeiro", df,
                    valor_beneficio=valor_beneficio,
                    percentual_cobranca=percentual_cobranca
                )
            else:
                st.error("‚ùå Preencha o Valor do Benef√≠cio e o Percentual a ser Cobrado.")

    # ETAPA 4: Financeiro recebe e finaliza o pagamento.
    elif status_atual == "Enviado para o financeiro" and perfil_usuario == "Financeiro":
        st.markdown("#### üí∞ Finaliza√ß√£o Financeira")
        st.info("Anexe o comprovante de pagamento ou marque como pago em dinheiro para finalizar.")

        pago_em_dinheiro = st.checkbox("Pago em dinheiro")
        
        comprovante = None
        if not pago_em_dinheiro:
            comprovante = st.file_uploader("Comprovante de Pagamento ou Boleto *", type=["pdf", "jpg", "png"])

        # L√≥gica de habilita√ß√£o do bot√£o
        pode_finalizar = (pago_em_dinheiro) or (not pago_em_dinheiro and comprovante is not None)

        if st.button("‚úÖ Finalizar Benef√≠cio", type="primary", disabled=not pode_finalizar):
            comprovante_url = ""
            tipo_pagamento = "Dinheiro" if pago_em_dinheiro else "Anexo"
            
            if comprovante:
                with st.spinner("Enviando anexo..."):
                    comprovante_url = salvar_arquivo(comprovante, processo, "pagamento_beneficio")
            
            atualizar_dados_finalizacao(
                beneficio_id, "Finalizado", df,
                comprovante_url=comprovante_url,
                tipo_pagamento=tipo_pagamento
            )

    # BENEF√çCIO FINALIZADO - Apenas visualiza√ß√£o
    elif status_atual == "Finalizado":
        st.markdown("#### üéâ Benef√≠cio Finalizado")
        st.success("‚úÖ Este benef√≠cio foi conclu√≠do com sucesso!")
        
        # Mostrar informa√ß√µes finais
        col_final1, col_final2 = st.columns(2)
        
        with col_final1:
            st.markdown("**üí∞ Informa√ß√µes do Pagamento:**")
            st.write(f"- Tipo: {linha_beneficio.get('Tipo Pagamento', 'N/A')}")
            
            # FORMATAR VALOR CORRETAMENTE
            valor_pago = linha_beneficio.get('Valor Pago', 0)
            if valor_pago and str(valor_pago).replace('.', '').isdigit():
                valor_formatado = f"R$ {float(valor_pago):,.2f}"
            else:
                valor_formatado = "N/A"
            
            st.write(f"- Valor: {valor_formatado}")
            st.write(f"- Data: {linha_beneficio.get('Data Finaliza√ß√£o', 'N/A')}")
            
            if linha_beneficio.get("Comprovante Pagamento"):
                st.markdown("**üìé Comprovante:**")
                baixar_arquivo_drive(linha_beneficio["Comprovante Pagamento"], "üìé Baixar Comprovante")
        
            
            with col_final2:
                st.markdown("**üìã Informa√ß√µes do Benef√≠cio:**")
                st.write(f"- Benef√≠cio: {linha_beneficio.get('Benef√≠cio Verificado', 'N/A')}")
                st.write(f"- Percentual: {linha_beneficio.get('Percentual Cobran√ßa', 'N/A')}")
                st.write(f"- Finalizado por: {linha_beneficio.get('Finalizado Por', 'N/A')}")
            
            # Timeline
            st.markdown("**üìÖ Timeline do Benef√≠cio:**")
            timeline_data = []
            if linha_beneficio.get("Data Cadastro"):
                timeline_data.append(f"‚Ä¢ **Cadastrado:** {linha_beneficio['Data Cadastro']} por {linha_beneficio.get('Cadastrado Por', 'N/A')}")
            if linha_beneficio.get("Data Envio Administrativo"):
                timeline_data.append(f"‚Ä¢ **Enviado para Administrativo:** {linha_beneficio['Data Envio Administrativo']} por {linha_beneficio.get('Enviado Administrativo Por', 'N/A')}")
            if linha_beneficio.get("Data Implanta√ß√£o"):
                timeline_data.append(f"‚Ä¢ **Implantado:** {linha_beneficio['Data Implanta√ß√£o']} por {linha_beneficio.get('Implantado Por', 'N/A')}")
            if linha_beneficio.get("Data Envio Financeiro"):
                timeline_data.append(f"‚Ä¢ **Enviado para Financeiro:** {linha_beneficio['Data Envio Financeiro']} por {linha_beneficio.get('Enviado Financeiro Por', 'N/A')}")
            if linha_beneficio.get("Data Finaliza√ß√£o"):
                timeline_data.append(f"‚Ä¢ **Finalizado:** {linha_beneficio['Data Finaliza√ß√£o']} por {linha_beneficio.get('Finalizado Por', 'N/A')}")
            
            for item in timeline_data:
                st.markdown(item)
    
    # ACESSO NEGADO
    else:
        if not pode_editar_status_beneficios(status_atual, perfil_usuario):
            st.error(f"‚ùå Seu perfil ({perfil_usuario}) n√£o pode editar benef√≠cios com status '{status_atual}'")

def atualizar_status_beneficio(beneficio_id, novo_status, df, **kwargs):
    """
    Atualiza o status e outros campos de um benef√≠cio, salva e fecha o di√°logo.
    """
    from components.functions_controle import save_data_to_github_seguro
    
    if "df_editado_beneficios" not in st.session_state:
        st.session_state.df_editado_beneficios = df.copy()

    idx = st.session_state.df_editado_beneficios[st.session_state.df_editado_beneficios["ID"] == beneficio_id].index
    if idx.empty:
        st.error("Erro: ID do benef√≠cio n√£o encontrado para atualiza√ß√£o."); return

    usuario_atual = st.session_state.get("usuario", "Sistema")
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")

    st.session_state.df_editado_beneficios.loc[idx, "Status"] = novo_status

    if novo_status == "Implantado":
        st.session_state.df_editado_beneficios.loc[idx, "Data Implanta√ß√£o"] = data_atual
        st.session_state.df_editado_beneficios.loc[idx, "Implantado Por"] = usuario_atual
    
    elif novo_status == "Enviado para o financeiro":
        st.session_state.df_editado_beneficios.loc[idx, "Data Envio Financeiro"] = data_atual
        st.session_state.df_editado_beneficios.loc[idx, "Enviado Financeiro Por"] = usuario_atual
        # Salva os novos campos de valor e percentual
        if 'valor_beneficio' in kwargs:
            st.session_state.df_editado_beneficios.loc[idx, "Valor do Benef√≠cio"] = kwargs['valor_beneficio']
        if 'percentual_cobranca' in kwargs:
            st.session_state.df_editado_beneficios.loc[idx, "Percentual Cobran√ßa"] = kwargs['percentual_cobranca']

    # Salvar e fechar
    novo_sha = save_data_to_github_seguro(st.session_state.df_editado_beneficios, "lista_beneficios.csv", "file_sha_beneficios")
    if novo_sha:
        st.session_state.file_sha_beneficios = novo_sha
        st.toast(f"Status atualizado para: {novo_status}", icon="‚úÖ")
        st.session_state.show_beneficio_dialog = False
        st.rerun()
    else:
        st.error("Falha ao salvar a atualiza√ß√£o.")

def atualizar_dados_finalizacao(beneficio_id, novo_status, df, comprovante_url, tipo_pagamento):
    """Atualiza os dados de finaliza√ß√£o de um benef√≠cio, salva e fecha o di√°logo."""
    from components.functions_controle import save_data_to_github_seguro

    if "df_editado_beneficios" not in st.session_state:
        st.session_state.df_editado_beneficios = df.copy()

    idx = st.session_state.df_editado_beneficios[st.session_state.df_editado_beneficios["ID"] == beneficio_id].index
    if idx.empty:
        st.error("Erro: ID do benef√≠cio n√£o encontrado para finaliza√ß√£o."); return

    usuario_atual = st.session_state.get("usuario", "Sistema")
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M")

    st.session_state.df_editado_beneficios.loc[idx, "Status"] = novo_status
    st.session_state.df_editado_beneficios.loc[idx, "Data Finaliza√ß√£o"] = data_atual
    st.session_state.df_editado_beneficios.loc[idx, "Finalizado Por"] = usuario_atual
    st.session_state.df_editado_beneficios.loc[idx, "Comprovante Pagamento"] = comprovante_url
    st.session_state.df_editado_beneficios.loc[idx, "Tipo Pagamento"] = tipo_pagamento

    # Salvar e fechar
    novo_sha = save_data_to_github_seguro(st.session_state.df_editado_beneficios, "lista_beneficios.csv", "file_sha_beneficios")
    if novo_sha:
        st.session_state.file_sha_beneficios = novo_sha
        st.toast("Benef√≠cio finalizado com sucesso!", icon="üéâ")
        st.balloons()
        st.session_state.show_beneficio_dialog = False
        st.rerun()
    else:
        st.error("Falha ao salvar a finaliza√ß√£o.")

def interface_visualizar_dados_beneficios(df):
    """Interface aprimorada para visualizar dados e m√©tricas dos Benef√≠cios com pagina√ß√£o."""
    st.subheader("üìÅ Visualizar Dados - Benef√≠cios")
    
    if df.empty:
        st.info("üìã Nenhum benef√≠cio cadastrado para visualizar.")
        return

    # Inicializar estado da pagina√ß√£o para esta aba
    if "current_page_vis_beneficios" not in st.session_state:
        st.session_state.current_page_vis_beneficios = 1
    
    # --- M√©tricas Resumo ---
    st.markdown("#### üìä Resumo Geral")
    col_resumo1, col_resumo2, col_resumo3, col_resumo4 = st.columns(4)
    
    with col_resumo1:
        st.metric("Total de Benef√≠cios", len(df))
    with col_resumo2:
        finalizados = len(df[df["Status"] == "Finalizado"]) if "Status" in df.columns else 0
        st.metric("Benef√≠cios Finalizados", finalizados)
    with col_resumo3:
        tipos_unicos = df["TIPO DE PROCESSO"].nunique() if "TIPO DE PROCESSO" in df.columns else 0
        st.metric("Tipos de Processo", tipos_unicos)
    with col_resumo4:
        if "Valor do Benef√≠cio" in df.columns:
            valores_numericos = pd.to_numeric(df["Valor do Benef√≠cio"], errors='coerce').dropna()
            total_valor = valores_numericos.sum()
            st.metric("Valor Total (Benef√≠cios)", f"R$ {total_valor:,.2f}")
        else:
            st.metric("Valor Total (Benef√≠cios)", "N/A")
    
    st.markdown("---")

    # --- Filtros ---
    st.markdown("#### üîç Filtros e Pesquisa")
    col_filtro1, col_filtro2, col_filtro3 = st.columns([2, 2, 3])
    
    df_visualizado = df.copy()

    with col_filtro1:
        if "Status" in df_visualizado.columns:
            status_options = ["Todos"] + list(df_visualizado["Status"].dropna().unique())
            status_filtro = st.selectbox("Filtrar por Status:", options=status_options, key="vis_status_beneficio")
            if status_filtro != "Todos":
                df_visualizado = df_visualizado[df_visualizado["Status"] == status_filtro]
    
    with col_filtro2:
        if "TIPO DE PROCESSO" in df_visualizado.columns:
            tipo_options = ["Todos"] + list(df_visualizado["TIPO DE PROCESSO"].dropna().unique())
            tipo_filtro = st.selectbox("Filtrar por Tipo:", options=tipo_options, key="vis_tipo_beneficio")
            if tipo_filtro != "Todos":
                df_visualizado = df_visualizado[df_visualizado["TIPO DE PROCESSO"] == tipo_filtro]
    
    with col_filtro3:
        busca_texto = st.text_input("Buscar por N¬∫ do Processo ou Parte:", key="vis_busca_beneficio")
        if busca_texto:
            df_visualizado = df_visualizado[
                df_visualizado["N¬∫ DO PROCESSO"].str.contains(busca_texto, case=False, na=False) |
                df_visualizado["PARTE"].str.contains(busca_texto, case=False, na=False)
            ]

    # --- L√≥gica de Pagina√ß√£o ---
    items_per_page = 10
    total_registros = len(df_visualizado)
    total_pages = math.ceil(total_registros / items_per_page) if items_per_page > 0 else 1
    
    if st.session_state.current_page_vis_beneficios > total_pages:
        st.session_state.current_page_vis_beneficios = 1

    start_idx = (st.session_state.current_page_vis_beneficios - 1) * items_per_page
    end_idx = start_idx + items_per_page
    df_paginado = df_visualizado.iloc[start_idx:end_idx]

    # --- Tabela de Dados ---
    st.markdown(f"#### üìä Dados ({total_registros} registros encontrados)")
    
    colunas_exibir = [
        "N¬∫ DO PROCESSO", "PARTE", "Status", "Data Cadastro", 
        "TIPO DE PROCESSO", "Valor do Benef√≠cio"
    ]
    colunas_disponiveis = [col for col in colunas_exibir if col in df_visualizado.columns]

    # Bot√µes de Download (para os dados filtrados completos)
    if not df_visualizado.empty:
        col_btn1, col_btn2, _ = st.columns([1.5, 1.5, 7])
        with col_btn1:
            csv = df_visualizado[colunas_disponiveis].to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Baixar CSV", data=csv, file_name="beneficios_filtrados.csv",
                mime="text/csv", use_container_width=True
            )
        with col_btn2:
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_visualizado[colunas_disponiveis].to_excel(writer, index=False, sheet_name='Beneficios')
            excel_data = output.getvalue()
            st.download_button(
                label="üì• Baixar Excel", data=excel_data, file_name="beneficios_filtrados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", use_container_width=True
            )

    # Tabela com dados paginados
    if not df_paginado.empty:
        st.markdown(f'<p style="font-size: small; color: steelblue;">Mostrando {start_idx+1} a {min(end_idx, total_registros)} de {total_registros} registros</p>', unsafe_allow_html=True)
        st.dataframe(
            df_paginado[colunas_disponiveis],
            use_container_width=True,
            hide_index=True
        )
    else:
        st.info("Nenhum registro encontrado com os filtros aplicados.")

    # --- Controles de Pagina√ß√£o ---
    if total_pages > 1:
        st.markdown("---")
        col_nav1, col_nav2, col_nav3 = st.columns([3, 2, 3])
        with col_nav1:
            if st.session_state.current_page_vis_beneficios > 1:
                if st.button("<< Primeira", key="vis_ben_primeira"): st.session_state.current_page_vis_beneficios = 1; st.rerun()
                if st.button("< Anterior", key="vis_ben_anterior"): st.session_state.current_page_vis_beneficios -= 1; st.rerun()
        with col_nav2:
            st.write(f"P√°gina {st.session_state.current_page_vis_beneficios} de {total_pages}")
        with col_nav3:
            if st.session_state.current_page_vis_beneficios < total_pages:
                if st.button("Pr√≥xima >", key="vis_ben_proxima"): st.session_state.current_page_vis_beneficios += 1; st.rerun()
                if st.button("√öltima >>", key="vis_ben_ultima"): st.session_state.current_page_vis_beneficios = total_pages; st.rerun()

# =====================================
# FUN√á√ïES DE EXPORTA√á√ÉO E IMPORTA√á√ÉO - BENEF√çCIOS
# =====================================

def carregar_beneficios():
    """Carrega os dados de benef√≠cios do GitHub"""
    df, file_sha = load_data_from_github("lista_beneficios.csv")
    
    # Garantir que o DataFrame tenha a coluna ID
    df = garantir_coluna_id(df)
    
    return df